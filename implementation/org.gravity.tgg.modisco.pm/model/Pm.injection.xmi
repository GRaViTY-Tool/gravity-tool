<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.pm.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tEnum&quot;, tEnum);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tEnum&quot;).eClass()).equals(&quot;basic.TEnum.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mClass&quot;, mClass);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mModifier&quot;, mModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mModifier&quot;,mModifier);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeInt.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mVar&quot;, mVar);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mVar&quot;,mVar);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;mEntryToTParameter&quot;,mEntryToTParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mVar&quot;, mVar);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mAnnotToTAnnot&quot;, mAnnotToTAnnot);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mVar&quot;).eClass()).equals(&quot;modisco.MSingleVariableDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mTarget&quot;, mTarget);&#xA;match.registerObject(&quot;mSource&quot;, mSource);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mSourceToTSource&quot;, mSourceToTSource);&#xA;ruleresult.registerObject(&quot;mTarget&quot;, mTarget);&#xA;ruleresult.registerObject(&quot;tSource&quot;, tSource);&#xA;ruleresult.registerObject(&quot;mSource&quot;, mSource);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSource&quot;, tSource);&#xA;match.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mSourceToTSource&quot;, mSourceToTSource);&#xA;ruleresult.registerObject(&quot;mTarget&quot;, mTarget);&#xA;ruleresult.registerObject(&quot;tSource&quot;, tSource);&#xA;ruleresult.registerObject(&quot;mSource&quot;, mSource);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;mComment&quot;, mComment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment.content&quot;, true, csp);&#xA;var_mComment_content.setValue(mComment.getContent());&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText.text&quot;, csp);&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mComment_content,var_tText_text);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mComment&quot;,mComment);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tText&quot;, tText);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mCommentToTText&quot;, mCommentToTText);&#xA;ruleresult.registerObject(&quot;mComment&quot;, mComment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mComment&quot;).eClass()).equals(&quot;java.LineComment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tText&quot;, tText);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText.text&quot;, true, csp);&#xA;var_tText_text.setValue(tText.getText());&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment.content&quot;, csp);&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mComment_content,var_tText_text);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tText&quot;,tText);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tText&quot;, tText);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mCommentToTText&quot;, mCommentToTText);&#xA;ruleresult.registerObject(&quot;mComment&quot;, mComment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tText&quot;).eClass()).equals(&quot;basic.annotations.TTextAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeLong.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mCreation&quot;, mCreation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnonymous&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnonymous&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tModule&quot;, tModule);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tEnum&quot;, tEnum);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tEnum&quot;).eClass()).equals(&quot;basic.TEnum.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mArrayType&quot;, mArrayType);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mTypeAccess&quot;, mTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;mArrayType&quot;,mArrayType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tModel&quot;,tModel);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mTypeAccess&quot;,mTypeAccess);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;arrayTypeToTArrayClass&quot;, arrayTypeToTArrayClass);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;mArrayType&quot;, mArrayType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tModel&quot;, tModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;modelToTypeGraph&quot;, modelToTypeGraph);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mTypeAccess&quot;, mTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mArrayType&quot;).eClass()).equals(&quot;java.ArrayType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;match.registerObject(&quot;tModel&quot;, tModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(mValue.getTokenValue());&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, csp);&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.NumberLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(tValue.getTNumber());&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, csp);&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TNumberNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;cu&quot;, cu);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;tp&quot;, tp);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;module&quot;, module);&#xA;match.registerObject(&quot;tp&quot;, tp);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;tp&quot;, tp);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeByte.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(mValue.getEscapedValue());&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, csp);&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.StringLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, true, csp);&#xA;var_tValue_tText.setValue(tValue.getTText());&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, csp);&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TTextNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;match.registerObject(&quot;mSubPackage&quot;, mSubPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage.name&quot;, true, csp);&#xA;var_mSubPackage_name.setValue(mSubPackage.getName());&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage.tName&quot;, csp);&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xA;isApplicableMatch.registerObject(&quot;tParentPackage&quot;,tParentPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xA;isApplicableMatch.registerObject(&quot;mSubPackage&quot;,mSubPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;ruleresult.registerObject(&quot;tParentPackage&quot;, tParentPackage);&#xA;ruleresult.registerObject(&quot;tSubPackage&quot;, tSubPackage);&#xA;ruleresult.registerObject(&quot;mPackageToTSub&quot;, mPackageToTSub);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mParentPackageToTParent&quot;, mParentPackageToTParent);&#xA;ruleresult.registerObject(&quot;mSubPackage&quot;, mSubPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSubPackage&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParentPackage&quot;, tParentPackage);&#xA;match.registerObject(&quot;tSubPackage&quot;, tSubPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage.tName&quot;, true, csp);&#xA;var_tSubPackage_tName.setValue(tSubPackage.getTName());&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage.name&quot;, csp);&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xA;isApplicableMatch.registerObject(&quot;tParentPackage&quot;,tParentPackage);&#xA;isApplicableMatch.registerObject(&quot;tSubPackage&quot;,tSubPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mParentPackage&quot;, mParentPackage);&#xA;ruleresult.registerObject(&quot;tParentPackage&quot;, tParentPackage);&#xA;ruleresult.registerObject(&quot;tSubPackage&quot;, tSubPackage);&#xA;ruleresult.registerObject(&quot;mPackageToTSub&quot;, mPackageToTSub);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mParentPackageToTParent&quot;, mParentPackageToTParent);&#xA;ruleresult.registerObject(&quot;mSubPackage&quot;, mSubPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSubPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mModifier&quot;, mModifier);&#xA;match.registerObject(&quot;mClass&quot;, mClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;mModifier&quot;,mModifier);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.upperBound&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(tFieldSignature.getUpperBound());&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.lowerBound&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(tFieldSignature.getLowerBound());&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;upperBound&quot;, csp);&#xA;var_upperBound.setType(&quot;int&quot;);&#xA;Variable var_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lowerBound&quot;, csp);&#xA;var_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tFieldSignature_upperBound,var_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tFieldSignature_lowerBound,var_lowerBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MFieldDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.upperBound&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(tFieldSignature.getUpperBound());&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.lowerBound&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(tFieldSignature.getLowerBound());&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;upperBound&quot;, csp);&#xA;var_upperBound.setType(&quot;int&quot;);&#xA;Variable var_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lowerBound&quot;, csp);&#xA;var_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tFieldSignature_upperBound,var_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tFieldSignature_lowerBound,var_lowerBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTDefinition&quot;, mDefinitionToTDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTFieldSignature&quot;, mSignatureToTFieldSignature);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tFieldSignature&quot;, tFieldSignature);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TFieldDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mNestedType&quot;,mNestedType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mNestedType&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mStaticType&quot;, mStaticType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tStaticType&quot;,tStaticType);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mStaticTypeTotStaticType&quot;,mStaticTypeTotStaticType);&#xA;isApplicableMatch.registerObject(&quot;mStaticType&quot;,mStaticType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;tStaticType&quot;, tStaticType);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mStaticTypeTotStaticType&quot;, mStaticTypeTotStaticType);&#xA;ruleresult.registerObject(&quot;mStaticType&quot;, mStaticType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tStaticType&quot;, tStaticType);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tStaticType&quot;,tStaticType);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mStaticTypeTotStaticType&quot;,mStaticTypeTotStaticType);&#xA;isApplicableMatch.registerObject(&quot;mStaticType&quot;,mStaticType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;tStaticType&quot;, tStaticType);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mStaticTypeTotStaticType&quot;, mStaticTypeTotStaticType);&#xA;ruleresult.registerObject(&quot;mStaticType&quot;, mStaticType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mArray&quot;, mArray);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.TypeLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TClassNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeChar.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tModule&quot;, tModule);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;cu&quot;, cu);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;tp&quot;, tp);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;module&quot;, module);&#xA;match.registerObject(&quot;tp&quot;, tp);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;tp&quot;, tp);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.annotations.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mArray&quot;, mArray);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, true, csp);&#xA;var_mValue_value.setValue(mValue.isValue());&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, csp);&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.BooleanLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, true, csp);&#xA;var_tValue_value.setValue(tValue.isValue());&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, csp);&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TBoolNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mInvokedMember&quot;, mInvokedMember);&#xA;match.registerObject(&quot;invocation&quot;, invocation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMemberToTInvokedMember&quot;,mInvokedMemberToTInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;tInvokedMember&quot;,tInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMember&quot;,mInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mInvokedMemberToTInvokedMember&quot;, mInvokedMemberToTInvokedMember);&#xA;ruleresult.registerObject(&quot;tInvokedMember&quot;, tInvokedMember);&#xA;ruleresult.registerObject(&quot;mInvokedMember&quot;, mInvokedMember);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tInvokedMember&quot;, tInvokedMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMemberToTInvokedMember&quot;,mInvokedMemberToTInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;tInvokedMember&quot;,tInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMember&quot;,mInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mInvokedMemberToTInvokedMember&quot;, mInvokedMemberToTInvokedMember);&#xA;ruleresult.registerObject(&quot;tInvokedMember&quot;, tInvokedMember);&#xA;ruleresult.registerObject(&quot;mInvokedMember&quot;, mInvokedMember);&#xA;ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;access&quot;, access);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember.name&quot;, true, csp);&#xA;var_mMember_name.setValue(mMember.getName());&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMember_name,var_tName_tName);&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;access&quot;,access);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mTypeToType&quot;,mTypeToType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationToAnnotation&quot;,mAnnotationToAnnotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;anntotatableToTannotatable&quot;, anntotatableToTannotatable);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;memberToMember&quot;, memberToMember);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mTypeToType&quot;, mTypeToType);&#xA;ruleresult.registerObject(&quot;mAnnotationToAnnotation&quot;, mAnnotationToAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;access&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mMember&quot;).eClass()).equals(&quot;java.AnnotationTypeMemberDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pm&quot;, pm);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember.name&quot;, csp);&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMember_name,var_tName_tName);&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mTypeToType&quot;,mTypeToType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationToAnnotation&quot;,mAnnotationToAnnotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;anntotatableToTannotatable&quot;, anntotatableToTannotatable);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;memberToMember&quot;, memberToMember);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mTypeToType&quot;, mTypeToType);&#xA;ruleresult.registerObject(&quot;mAnnotationToAnnotation&quot;, mAnnotationToAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TFieldSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TField.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tMember&quot;).eClass()).equals(&quot;basic.TFieldDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;match.registerObject(&quot;mField&quot;, mField);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;modisco.MSingleVariableAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tField&quot;, tField);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TWrite.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mOverriding&quot;, mOverriding);&#xA;match.registerObject(&quot;mMethod&quot;, mMethod);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOverriding&quot;,mOverriding);&#xA;isApplicableMatch.registerObject(&quot;tOverriding&quot;,tOverriding);&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xA;isApplicableMatch.registerObject(&quot;mOverridingToTOverriding&quot;,mOverridingToTOverriding);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mOverriding&quot;, mOverriding);&#xA;ruleresult.registerObject(&quot;tOverriding&quot;, tOverriding);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;mOverridingToTOverriding&quot;, mOverridingToTOverriding);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tOverriding&quot;, tOverriding);&#xA;match.registerObject(&quot;tMethod&quot;, tMethod);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOverriding&quot;,mOverriding);&#xA;isApplicableMatch.registerObject(&quot;tOverriding&quot;,tOverriding);&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xA;isApplicableMatch.registerObject(&quot;mOverridingToTOverriding&quot;,mOverridingToTOverriding);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mOverriding&quot;, mOverriding);&#xA;ruleresult.registerObject(&quot;tOverriding&quot;, tOverriding);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;tMethod&quot;, tMethod);&#xA;ruleresult.registerObject(&quot;mOverridingToTOverriding&quot;, mOverridingToTOverriding);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;varDeclFragment&quot;, varDeclFragment);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;varDeclFragment&quot;,varDeclFragment);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTFieldDefinition&quot;,eFieldDeclarationToTFieldDefinition);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;varDeclFragment&quot;, varDeclFragment);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTFieldDefinition&quot;, eFieldDeclarationToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;varDeclFragmentToTFieldDefinition&quot;, varDeclFragmentToTFieldDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;varDeclFragment&quot;).eClass()).equals(&quot;java.VariableDeclarationFragment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;modisco.MConstructorInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TCall.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter.upperBound&quot;, csp);&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSiganture&quot;,tSiganture);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tSiganture&quot;, tSiganture);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mEntry&quot;).eClass()).equals(&quot;modisco.MEntry.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;match.registerObject(&quot;tSiganture&quot;, tSiganture);&#xA;match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter.upperBound&quot;, true, csp);&#xA;var_tParameter_upperBound.setValue(tParameter.getUpperBound());&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSiganture&quot;,tSiganture);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tSiganture&quot;, tSiganture);&#xA;ruleresult.registerObject(&quot;mEntryToTParameter&quot;, mEntryToTParameter);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tParameter&quot;).eClass()).equals(&quot;basic.TParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;match.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;, eInterfaceDeclarationToTInterface);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tInterface&quot;, tInterface);&#xA;match.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclaration&quot;, eInterfaceDeclaration);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;, eInterfaceDeclarationToTInterface);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;modisco.MMethodInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TCall.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mParent&quot;, mParent);&#xA;match.registerObject(&quot;mCreation&quot;, mCreation);&#xA;match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mParent&quot;, mParent);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;parentToParent&quot;, parentToParent);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tParent&quot;, tParent);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mParent&quot;, mParent);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;parentToParent&quot;, parentToParent);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(cu.getOriginalFilePath());&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, csp);&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2pm&quot;, m2pm);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;cu&quot;).eClass()).equals(&quot;java.ClassFile.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;module&quot;, module);&#xA;match.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, true, csp);&#xA;var_module_location.setValue(module.getLocation());&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, csp);&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2pm&quot;, m2pm);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;module&quot;).eClass()).equals(&quot;basic.TModule.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.TypeLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TClassNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;match.registerObject(&quot;mParameterList&quot;, mParameterList);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mParameterList&quot;,mParameterList);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mParameterList&quot;, mParameterList);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;match.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mParameterList&quot;,mParameterList);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mParameterList&quot;, mParameterList);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeShort.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;modisco.MSuperMethodInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TCall.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mMethod&quot;, mMethod);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod.name&quot;, true, csp);&#xA;var_mMethod_name.setValue(mMethod.getName());&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName.tName&quot;, csp);&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;model2pm&quot;,model2pm);&#xA;isApplicableMatch.registerObject(&quot;tModel&quot;,tModel);&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMethodName&quot;, tMethodName);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;model2pm&quot;, model2pm);&#xA;ruleresult.registerObject(&quot;unresolved2Definiton&quot;, unresolved2Definiton);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;tModel&quot;, tModel);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mMethod&quot;).eClass()).equals(&quot;java.UnresolvedMethodDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMethodName&quot;, tMethodName);&#xA;match.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;match.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;match.registerObject(&quot;tModel&quot;, tModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName.tName&quot;, true, csp);&#xA;var_tMethodName_tName.setValue(tMethodName.getTName());&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod.name&quot;, csp);&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMethodName&quot;,tMethodName);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;tMethodDefinition&quot;,tMethodDefinition);&#xA;isApplicableMatch.registerObject(&quot;model2pm&quot;,model2pm);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tModel&quot;,tModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMethodName&quot;, tMethodName);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tMethodDefinition&quot;, tMethodDefinition);&#xA;ruleresult.registerObject(&quot;model2pm&quot;, model2pm);&#xA;ruleresult.registerObject(&quot;unresolved2Definiton&quot;, unresolved2Definiton);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;tModel&quot;, tModel);&#xA;ruleresult.registerObject(&quot;mMethod&quot;, mMethod);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tMethodName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tMethodDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tMethodSignature&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mInterface&quot;, mInterface);&#xA;match.registerObject(&quot;mModifier&quot;, mModifier);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;InterfaceVisibility interfaceVisibility = new InterfaceVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(interfaceVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;interfaceVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;interfaceVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mInterface&quot;,mInterface);&#xA;isApplicableMatch.registerObject(&quot;mModifier&quot;,mModifier);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mInterface&quot;, mInterface);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tInterface&quot;, tInterface);&#xA;match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;InterfaceVisibility interfaceVisibility = new InterfaceVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(interfaceVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;interfaceVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;interfaceVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mInterface&quot;,mInterface);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tInterface&quot;, tInterface);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mInterface&quot;, mInterface);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;match.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, true, csp);&#xA;var_mFieldName_mName.setValue(mFieldName.getMName());&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, csp);&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;modelToTypeGraph&quot;, modelToTypeGraph);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mFieldName&quot;).eClass()).equals(&quot;modisco.MFieldName.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tField&quot;, tField);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, true, csp);&#xA;var_tField_tName.setValue(tField.getTName());&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, csp);&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;modelToTypeGraph&quot;, modelToTypeGraph);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tField&quot;).eClass()).equals(&quot;basic.TField.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;match.registerObject(&quot;mField&quot;, mField);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;modisco.MSingleVariableAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tField&quot;, tField);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TRead.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mNestedType&quot;,mNestedType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mNestedType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.annotations.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;match.registerObject(&quot;mEntry&quot;, mEntry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;ruleresult.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;match.registerObject(&quot;tParameter&quot;, tParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;, mmethodSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mPrevEntry&quot;, mPrevEntry);&#xA;ruleresult.registerObject(&quot;tPrevParameter&quot;, tPrevParameter);&#xA;ruleresult.registerObject(&quot;mEntry&quot;, mEntry);&#xA;ruleresult.registerObject(&quot;tParameter&quot;, tParameter);&#xA;ruleresult.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;, eSingleVariableDeclarationToTParameter);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mValue&quot;, mValue);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.name&quot;, true, csp);&#xA;var_mValue_name.setValue(mValue.getName());&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue.tKey&quot;, csp);&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;ownerToWoner&quot;,ownerToWoner);&#xA;isApplicableMatch.registerObject(&quot;annotationToTAnnotation&quot;,annotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;annotationMemberValuePairToTAnnotationValue&quot;, annotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;ownerToWoner&quot;, ownerToWoner);&#xA;ruleresult.registerObject(&quot;annotationToTAnnotation&quot;, annotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;tOwner&quot;, tOwner);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.AnnotationMemberValuePair.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;match.registerObject(&quot;tOwner&quot;, tOwner);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue.tKey&quot;, true, csp);&#xA;var_tAnnotationValue_tKey.setValue(tAnnotationValue.getTKey());&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.name&quot;, csp);&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;ownerToWoner&quot;,ownerToWoner);&#xA;isApplicableMatch.registerObject(&quot;annotationToTAnnotation&quot;,annotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;annotationMemberValuePairToTAnnotationValue&quot;, annotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;ownerToWoner&quot;, ownerToWoner);&#xA;ruleresult.registerObject(&quot;annotationToTAnnotation&quot;, annotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;tOwner&quot;, tOwner);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotationValue&quot;).eClass()).equals(&quot;basic.annotations.TAnnotationValue.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeDouble.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mArray&quot;, mArray);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(mValue.getEscapedValue());&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, csp);&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.StringLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, true, csp);&#xA;var_tValue_tText.setValue(tValue.getTText());&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, csp);&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TTextNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mName&quot;, mName);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSignature&quot;).eClass()).equals(&quot;modisco.MMethodSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDef&quot;, mDef);&#xA;match.registerObject(&quot;mClass&quot;, mClass);&#xA;match.registerObject(&quot;mSyntethic&quot;, mSyntethic);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDef&quot;,mDef);&#xA;isApplicableMatch.registerObject(&quot;tDef&quot;,tDef);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mClassDeclarationToTClass&quot;,mClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;tSig&quot;,tSig);&#xA;isApplicableMatch.registerObject(&quot;mSyntethic&quot;,mSyntethic);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDef&quot;, mDef);&#xA;ruleresult.registerObject(&quot;tDef&quot;, tDef);&#xA;ruleresult.registerObject(&quot;tSyntethic&quot;, tSyntethic);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;ruleresult.registerObject(&quot;mSyntToTSynt&quot;, mSyntToTSynt);&#xA;ruleresult.registerObject(&quot;mClassDeclarationToTClass&quot;, mClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;tSig&quot;, tSig);&#xA;ruleresult.registerObject(&quot;mSyntethic&quot;, mSyntethic);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSyntethic&quot;).eClass()).equals(&quot;modisco.MSyntheticMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tDef&quot;, tDef);&#xA;match.registerObject(&quot;tSyntethic&quot;, tSyntethic);&#xA;match.registerObject(&quot;tSig&quot;, tSig);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDef&quot;,mDef);&#xA;isApplicableMatch.registerObject(&quot;tDef&quot;,tDef);&#xA;isApplicableMatch.registerObject(&quot;tSyntethic&quot;,tSyntethic);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mClassDeclarationToTClass&quot;,mClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;tSig&quot;,tSig);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mDef&quot;, mDef);&#xA;ruleresult.registerObject(&quot;tDef&quot;, tDef);&#xA;ruleresult.registerObject(&quot;tSyntethic&quot;, tSyntethic);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mClass&quot;, mClass);&#xA;ruleresult.registerObject(&quot;mSyntToTSynt&quot;, mSyntToTSynt);&#xA;ruleresult.registerObject(&quot;mClassDeclarationToTClass&quot;, mClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;tSig&quot;, tSig);&#xA;ruleresult.registerObject(&quot;mSyntethic&quot;, mSyntethic);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSyntethic&quot;).eClass()).equals(&quot;basic.TSyntethicMethod.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(cu.getOriginalFilePath());&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, csp);&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2pm&quot;, m2pm);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;cu&quot;).eClass()).equals(&quot;java.CompilationUnit.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;module&quot;, module);&#xA;match.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, true, csp);&#xA;var_module_location.setValue(module.getLocation());&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, csp);&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2pm&quot;, m2pm);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;module&quot;).eClass()).equals(&quot;basic.TModule.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mName&quot;, mName);&#xA;match.registerObject(&quot;mModel&quot;, mModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, true, csp);&#xA;var_mName_mName.setValue(mName.getMName());&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;modelToPg&quot;, modelToPg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mName&quot;).eClass()).equals(&quot;modisco.MMethodName.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tName&quot;, tName);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, csp);&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mName&quot;, mName);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;modelToPg&quot;, modelToPg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mNameToTName&quot;, mNameToTName);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mSignature&quot;).eClass()).equals(&quot;modisco.MFieldSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tField&quot;, tField);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mFieldName&quot;, mFieldName);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;eFieldDeclarationToTField&quot;, eFieldDeclarationToTField);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TFieldSignature.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.ArrayCreation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;match.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(mInnerClass.isProxy());&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(mInnerClass.getName());&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, csp);&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mInnerClass&quot;,mInnerClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tInnerTypeToTInnerAbstractType&quot;, tInnerTypeToTInnerAbstractType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mInnerClass&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;match.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(tInnerClass.isTLib());&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, csp);&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, csp);&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tInnerTypeToTInnerAbstractType&quot;, tInnerTypeToTInnerAbstractType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mTypeAccess&quot;, mTypeAccess);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.upperBound&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(tMethodSignature.getUpperBound());&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.lowerBound&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(tMethodSignature.getLowerBound());&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.upperBound&quot;, csp);&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.lowerBound&quot;, csp);&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mTypeAccess&quot;,mTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mTypeAccess&quot;, mTypeAccess);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MMethodDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.upperBound&quot;, true, csp);&#xA;var_tDefinition_upperBound.setValue(tDefinition.getUpperBound());&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.upperBound&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(tMethodSignature.getUpperBound());&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.lowerBound&quot;, true, csp);&#xA;var_tDefinition_lowerBound.setValue(tDefinition.getLowerBound());&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.lowerBound&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(tMethodSignature.getLowerBound());&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mTypeAccess&quot;, mTypeAccess);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;modisco.MClassInstanceCreation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TCall.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeBoolean.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mNestedType&quot;,mNestedType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mNestedType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;tEnum&quot;, tEnum);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tEnum&quot;).eClass()).equals(&quot;basic.TEnum.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xA;var_mPackage_name.setValue(mPackage.getName());&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, csp);&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mPackage&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, true, csp);&#xA;var_tPackage_tName.setValue(tPackage.getTName());&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPackage&quot;).eClass()).equals(&quot;basic.TPackage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(unresolvedType.isProxy());&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(unresolvedType.getName());&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;unresolvedType&quot;,unresolvedType);&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;unresolvedType&quot;).eClass()).equals(&quot;java.UnresolvedInterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tModule&quot;, tModule);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, csp);&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, csp);&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tClass&quot;).eClass()).equals(&quot;basic.TUnresolvedType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mSource&quot;, mSource);&#xA;match.registerObject(&quot;mTarget&quot;, mTarget);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSource&quot;, mSource);&#xA;ruleresult.registerObject(&quot;mTarget&quot;, mTarget);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mSourceToTSource&quot;, mSourceToTSource);&#xA;ruleresult.registerObject(&quot;tSource&quot;, tSource);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tFlow&quot;, tFlow);&#xA;match.registerObject(&quot;tSource&quot;, tSource);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mSource&quot;, mSource);&#xA;ruleresult.registerObject(&quot;mTarget&quot;, mTarget);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mSourceToTSource&quot;, mSourceToTSource);&#xA;ruleresult.registerObject(&quot;tSource&quot;, tSource);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;match.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eExtendedClassToTExtendedClass&quot;, eExtendedClassToTExtendedClass);&#xA;ruleresult.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;ruleresult.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eExtendedClassToTExtendedClass&quot;, eExtendedClassToTExtendedClass);&#xA;ruleresult.registerObject(&quot;eExtendedClass&quot;, eExtendedClass);&#xA;ruleresult.registerObject(&quot;tExtendedClass&quot;, tExtendedClass);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mArray&quot;, mArray);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.Annotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAnonymousToTAnonymous&quot;,mAnonymousToTAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAnonymousToTAnonymous&quot;, mAnonymousToTAnonymous);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAnonymousToTAnonymous&quot;,mAnonymousToTAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAnonymousToTAnonymous&quot;, mAnonymousToTAnonymous);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mSignatureToTSignature&quot;, mSignatureToTSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mAnnotationType&quot;, mAnnotationType);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;, AnnotationTypeToTAnnotationType);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mAnnotation&quot;, mAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotationType&quot;, tAnnotationType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eType&quot;, eType);&#xA;match.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;match.registerObject(&quot;eParameterTypeAccess&quot;, eParameterTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eParameterTypeAccess&quot;,eParameterTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eType&quot;, eType);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eParameterTypeAccess&quot;, eParameterTypeAccess);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eParameterTypeAccess&quot;,eParameterTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;eClassDeclaration&quot;, eClassDeclaration);&#xA;ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tSuperInterface&quot;, tSuperInterface);&#xA;ruleresult.registerObject(&quot;eType&quot;, eType);&#xA;ruleresult.registerObject(&quot;eSuperInterface&quot;, eSuperInterface);&#xA;ruleresult.registerObject(&quot;eClassDeclarationToTClass&quot;, eClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eParameterTypeAccess&quot;, eParameterTypeAccess);&#xA;ruleresult.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;, eSuperInterfaceToTSuperInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tModule&quot;, tModule);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mAnnotatableToTAnnotatable&quot;, mAnnotatableToTAnnotatable);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mModelToTypeGraph&quot;, mModelToTypeGraph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;match.registerObject(&quot;eParameterizedType&quot;, eParameterizedType);&#xA;match.registerObject(&quot;eType&quot;, eType);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eTypeAccess&quot;,eTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;eParameterizedType&quot;,eParameterizedType);&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;eTypeToTAbstractType&quot;,eTypeToTAbstractType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eTypeAccess&quot;, eTypeAccess);&#xA;ruleresult.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;ruleresult.registerObject(&quot;eParameterizedType&quot;, eParameterizedType);&#xA;ruleresult.registerObject(&quot;eType&quot;, eType);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;eTypeToTAbstractType&quot;, eTypeToTAbstractType);&#xA;ruleresult.registerObject(&quot;eParameterizedTypeToTAbstractType&quot;, eParameterizedTypeToTAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eParameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAbstractType&quot;, tAbstractType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;astNode&quot;, astNode);&#xA;match.registerObject(&quot;Annotation&quot;, Annotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;isApplicableMatch.registerObject(&quot;Annotation&quot;,Annotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;aSTNodeToTAnnotable&quot;, aSTNodeToTAnnotable);&#xA;ruleresult.registerObject(&quot;astNode&quot;, astNode);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;Annotation&quot;).eClass()).equals(&quot;java.Annotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;aSTNodeToTAnnotable&quot;, aSTNodeToTAnnotable);&#xA;ruleresult.registerObject(&quot;astNode&quot;, astNode);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotation&quot;).eClass()).equals(&quot;basic.annotations.TAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;match.registerObject(&quot;typeParameter&quot;, typeParameter);&#xA;match.registerObject(&quot;lang&quot;, lang);&#xA;match.registerObject(&quot;java&quot;, java);&#xA;match.registerObject(&quot;object&quot;, object);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;typeParameter&quot;,typeParameter);&#xA;isApplicableMatch.registerObject(&quot;javaToJava&quot;,javaToJava);&#xA;isApplicableMatch.registerObject(&quot;lang&quot;,lang);&#xA;isApplicableMatch.registerObject(&quot;tPackageLang&quot;,tPackageLang);&#xA;isApplicableMatch.registerObject(&quot;objectToObject&quot;,objectToObject);&#xA;isApplicableMatch.registerObject(&quot;java&quot;,java);&#xA;isApplicableMatch.registerObject(&quot;langToLang&quot;,langToLang);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;object&quot;,object);&#xA;isApplicableMatch.registerObject(&quot;tPackageJava&quot;,tPackageJava);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;typeParameter&quot;, typeParameter);&#xA;ruleresult.registerObject(&quot;javaToJava&quot;, javaToJava);&#xA;ruleresult.registerObject(&quot;lang&quot;, lang);&#xA;ruleresult.registerObject(&quot;tPackageLang&quot;, tPackageLang);&#xA;ruleresult.registerObject(&quot;objectToObject&quot;, objectToObject);&#xA;ruleresult.registerObject(&quot;templateTypeToTClass&quot;, templateTypeToTClass);&#xA;ruleresult.registerObject(&quot;java&quot;, java);&#xA;ruleresult.registerObject(&quot;langToLang&quot;, langToLang);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;object&quot;, object);&#xA;ruleresult.registerObject(&quot;tPackageJava&quot;, tPackageJava);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeParameter&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackageLang&quot;, tPackageLang);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tPackageJava&quot;, tPackageJava);&#xA;match.registerObject(&quot;tClass&quot;, tClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mParent&quot;, mParent);&#xA;match.registerObject(&quot;mCreation&quot;, mCreation);&#xA;match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mParent&quot;, mParent);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;parentToParent&quot;, parentToParent);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tParent&quot;, tParent);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mParent&quot;, mParent);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;parentToParent&quot;, parentToParent);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;tParent&quot;, tParent);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAccess&quot;, mAccess);&#xA;match.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;match.registerObject(&quot;mField&quot;, mField);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAccess&quot;,mAccess);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAccess&quot;).eClass()).equals(&quot;modisco.MSingleVariableAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;match.registerObject(&quot;tField&quot;, tField);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mAccess&quot;, mAccess);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;varDeclFrag&quot;, varDeclFrag);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mField&quot;, mField);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMethodToTMethod&quot;, mMethodToTMethod);&#xA;ruleresult.registerObject(&quot;mFlowOwnerToTFlowOwner&quot;, mFlowOwnerToTFlowOwner);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tField&quot;, tField);&#xA;ruleresult.registerObject(&quot;mAccessToTAccess&quot;, mAccessToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TReadWrite.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;array&quot;, array);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mCreation&quot;, mCreation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnonymous&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;mCreation&quot;, mCreation);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnonymous&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tPM&quot;, tPM);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTTYpe&quot;, mTypeToTTYpe);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MInitializer.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPM&quot;, tPM);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tPM&quot;, tPM);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mTypeToTTYpe&quot;, mTypeToTTYpe);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invocation&quot;, invocation);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;invocation&quot;).eClass()).equals(&quot;modisco.MSuperConstructorInvocation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tAccess&quot;, tAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;invocation&quot;, invocation);&#xA;ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;tAccess&quot;, tAccess);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;invocationToTAccess&quot;, invocationToTAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAccess&quot;).eClass()).equals(&quot;basic.TCall.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mFlow&quot;, mFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mFlow&quot;,mFlow);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;isApplicableMatch.registerObject(&quot;mOwnerToTOwner&quot;,mOwnerToTOwner);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mFlow&quot;, mFlow);&#xA;ruleresult.registerObject(&quot;mAbstFlowToTAbstFlow&quot;, mAbstFlowToTAbstFlow);&#xA;ruleresult.registerObject(&quot;tOwner&quot;, tOwner);&#xA;ruleresult.registerObject(&quot;mOwnerToTOwner&quot;, mOwnerToTOwner);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mFlow&quot;).eClass()).equals(&quot;modisco.MFlow.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tOwner&quot;, tOwner);&#xA;match.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;isApplicableMatch.registerObject(&quot;mOwnerToTOwner&quot;,mOwnerToTOwner);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mFlowToTFlow&quot;, mFlowToTFlow);&#xA;ruleresult.registerObject(&quot;mFlow&quot;, mFlow);&#xA;ruleresult.registerObject(&quot;mAbstFlowToTAbstFlow&quot;, mAbstFlowToTAbstFlow);&#xA;ruleresult.registerObject(&quot;tOwner&quot;, tOwner);&#xA;ruleresult.registerObject(&quot;mOwnerToTOwner&quot;, mOwnerToTOwner);&#xA;ruleresult.registerObject(&quot;tFlow&quot;, tFlow);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tFlow&quot;).eClass()).equals(&quot;basic.TFlow.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeFloat.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mModel&quot;, mModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, true, csp);&#xA;var_mModel_name.setValue(mModel.getName());&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, csp);&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;mModelToTPG&quot;, mModelToTPG);&#xA;ruleresult.registerObject(&quot;proxies&quot;, proxies);&#xA;ruleresult.registerObject(&quot;tPG&quot;, tPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModel&quot;).eClass()).equals(&quot;modisco.MGravityModel.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;proxies&quot;, proxies);&#xA;match.registerObject(&quot;tPG&quot;, tPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, true, csp);&#xA;var_tPG_tName.setValue(tPG.getTName());&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, csp);&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;proxies&quot;,proxies);&#xA;isApplicableMatch.registerObject(&quot;tPG&quot;,tPG);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mModel&quot;, mModel);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;mModelToTPG&quot;, mModelToTPG);&#xA;ruleresult.registerObject(&quot;proxies&quot;, proxies);&#xA;ruleresult.registerObject(&quot;tPG&quot;, tPG);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;primitives&quot;).eClass()).equals(&quot;basic.TModule.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;proxies&quot;).eClass()).equals(&quot;basic.TModule.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPG&quot;).eClass()).equals(&quot;basic.TypeGraph.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MConstructorDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mSignatureToTMethodSignature&quot;, mSignatureToTMethodSignature);&#xA;ruleresult.registerObject(&quot;tMethodSignature&quot;, tMethodSignature);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mFlowElementToTFlowElement&quot;, mFlowElementToTFlowElement);&#xA;ruleresult.registerObject(&quot;mSignature&quot;, mSignature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotation&quot;).eClass()).equals(&quot;basic.TConstructor.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, true, csp);&#xA;var_mValue_value.setValue(mValue.isValue());&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, csp);&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.BooleanLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, true, csp);&#xA;var_tValue_value.setValue(tValue.isValue());&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, csp);&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValueToTValue&quot;, mValueToTValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TBoolNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotation&quot;).eClass()).equals(&quot;basic.TEnum.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;Annotation&quot;, Annotation);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mModifier&quot;, mModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;Annotation&quot;,Annotation);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mModifier&quot;,mModifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;Annotation&quot;,Annotation);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;defToMember&quot;, defToMember);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ePrimitiveType&quot;,ePrimitiveType);&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;ePrimitiveType&quot;).eClass()).equals(&quot;java.PrimitiveTypeVoid.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;primitives&quot;, primitives);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tPrimitiveClass&quot;,tPrimitiveClass);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ePrimitiveType&quot;, ePrimitiveType);&#xA;ruleresult.registerObject(&quot;eModelToTypeGraph&quot;, eModelToTypeGraph);&#xA;ruleresult.registerObject(&quot;primitives&quot;, primitives);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;typeToTAbstractType&quot;, typeToTAbstractType);&#xA;ruleresult.registerObject(&quot;tPrimitiveClass&quot;, tPrimitiveClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tPrimitiveClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;match.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eNestedType&quot;,eNestedType);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;eNestedType&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;match.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;match.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;eNestedType&quot;, eNestedType);&#xA;ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;eNestedTypeToTNestedType&quot;, eNestedTypeToTNestedType);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;tOuterType&quot;, tOuterType);&#xA;ruleresult.registerObject(&quot;eOuterTypeToTOuterInterface&quot;, eOuterTypeToTOuterInterface);&#xA;ruleresult.registerObject(&quot;eOuterType&quot;, eOuterType);&#xA;ruleresult.registerObject(&quot;tOuterPackage&quot;, tOuterPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mPackageToTPackage&quot;, mPackageToTPackage);&#xA;ruleresult.registerObject(&quot;annotatable2Annotatable&quot;, annotatable2Annotatable);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;type2Type&quot;, type2Type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tType&quot;).eClass()).equals(&quot;basic.annotations.TAnnotationType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;module&quot;, module);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;cu2m&quot;, cu2m);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;module&quot;, module);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tPM&quot;, tPM);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mTypeToTTYpe&quot;, mTypeToTTYpe);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MInitializer.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPM&quot;, tPM);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;match.registerObject(&quot;tName&quot;, tName);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tPM&quot;, tPM);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mTypeToTTYpe&quot;, mTypeToTTYpe);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TMethodSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;match.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(mInnerClass.isProxy());&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(mInnerClass.getName());&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, csp);&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mInnerClass&quot;,mInnerClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tInnerTypeToTInnerAbstractType&quot;, tInnerTypeToTInnerAbstractType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mInnerClass&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;match.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;match.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(tInnerClass.isTLib());&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, csp);&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, csp);&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;tInnerClass&quot;,tInnerClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;astNodeToAnnotatable&quot;, astNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tInnerTypeToTInnerAbstractType&quot;, tInnerTypeToTInnerAbstractType);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;typeGraph&quot;, typeGraph);&#xA;ruleresult.registerObject(&quot;mInnerClass&quot;, mInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClass&quot;, eOuterClass);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tOuterClass&quot;, tOuterClass);&#xA;ruleresult.registerObject(&quot;tInnerClass&quot;, tInnerClass);&#xA;ruleresult.registerObject(&quot;eOuterClassToTOuterClass&quot;, eOuterClassToTOuterClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tInnerClass&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mArray&quot;, mArray);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(mValue.getTokenValue());&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, csp);&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.NumberLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(tValue.getTNumber());&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, csp);&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mArray&quot;, mArray);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TNumberNode.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;match.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(unresolvedType.isProxy());&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(unresolvedType.getName());&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;unresolvedType&quot;,unresolvedType);&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;unresolvedType&quot;).eClass()).equals(&quot;java.UnresolvedTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tModule&quot;, tModule);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, csp);&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, csp);&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;unresolvedType&quot;, unresolvedType);&#xA;ruleresult.registerObject(&quot;tModule&quot;, tModule);&#xA;ruleresult.registerObject(&quot;eModelToPg&quot;, eModelToPg);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eModel&quot;, eModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tClass&quot;).eClass()).equals(&quot;basic.TUnresolvedType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;method&quot;, method);&#xA;match.registerObject(&quot;astNode&quot;, astNode);&#xA;match.registerObject(&quot;Annotation&quot;, Annotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParam&quot;,tParam);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTDef&quot;,mMethodToTDef);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;isApplicableMatch.registerObject(&quot;Annotation&quot;,Annotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParam&quot;, tParam);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;mMethodToTDef&quot;, mMethodToTDef);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;astNode&quot;, astNode);&#xA;ruleresult.registerObject(&quot;aSTNodeToTAnnotable&quot;, aSTNodeToTAnnotable);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;Annotation&quot;).eClass()).equals(&quot;java.Annotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tParam&quot;, tParam);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;match.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParam&quot;,tParam);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTDef&quot;,mMethodToTDef);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tParam&quot;, tParam);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;AnnotationToTAnnotation&quot;, AnnotationToTAnnotation);&#xA;ruleresult.registerObject(&quot;mMethodToTDef&quot;, mMethodToTDef);&#xA;ruleresult.registerObject(&quot;tAnnotable&quot;, tAnnotable);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;astNode&quot;, astNode);&#xA;ruleresult.registerObject(&quot;aSTNodeToTAnnotable&quot;, aSTNodeToTAnnotable);&#xA;ruleresult.registerObject(&quot;Annotation&quot;, Annotation);&#xA;ruleresult.registerObject(&quot;tAnnotation&quot;, tAnnotation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnnotation&quot;).eClass()).equals(&quot;basic.annotations.TAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;match.registerObject(&quot;mOwner&quot;, mOwner);&#xA;match.registerObject(&quot;mValue&quot;, mValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mValue&quot;,mValue);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mValue&quot;).eClass()).equals(&quot;java.Annotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tValue&quot;, tValue);&#xA;match.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tValue&quot;,tValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;mAnnotationValue&quot;, mAnnotationValue);&#xA;ruleresult.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;, AnnotationMemberValuePairToTAnnotationValue);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;tValue&quot;, tValue);&#xA;ruleresult.registerObject(&quot;mOwner&quot;, mOwner);&#xA;ruleresult.registerObject(&quot;mValue&quot;, mValue);&#xA;ruleresult.registerObject(&quot;tAnnotationValue&quot;, tAnnotationValue);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tValue&quot;).eClass()).equals(&quot;basic.annotations.TAnnotation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnonymous&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;match.registerObject(&quot;tMember&quot;, tMember);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mMemberToTMember&quot;, mMemberToTMember);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;tAnonymous&quot;, tAnonymous);&#xA;ruleresult.registerObject(&quot;tMember&quot;, tMember);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;ruleresult.registerObject(&quot;mAnonymous&quot;, mAnonymous);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tAnonymous&quot;).eClass()).equals(&quot;basic.TClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;match.registerObject(&quot;mEnum&quot;, mEnum);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition.name&quot;, true, csp);&#xA;var_mDefinition_name.setValue(mDefinition.getName());&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mDefinition_name,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;mEnum&quot;,mEnum);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;mEnumToTEnum&quot;,mEnumToTEnum);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mEnum&quot;, mEnum);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;mEnumToTEnum&quot;, mEnumToTEnum);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mDefinition&quot;).eClass()).equals(&quot;modisco.MEnumConstantDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tName&quot;, tName);&#xA;match.registerObject(&quot;tSignature&quot;, tSignature);&#xA;match.registerObject(&quot;tEnum&quot;, tEnum);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;match.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition.name&quot;, csp);&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mDefinition_name,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;mEnum&quot;,mEnum);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;mEnumToTEnum&quot;,mEnumToTEnum);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tName&quot;, tName);&#xA;ruleresult.registerObject(&quot;tSignature&quot;, tSignature);&#xA;ruleresult.registerObject(&quot;mDefinition&quot;, mDefinition);&#xA;ruleresult.registerObject(&quot;tEnum&quot;, tEnum);&#xA;ruleresult.registerObject(&quot;mBodyToTAnnotation&quot;, mBodyToTAnnotation);&#xA;ruleresult.registerObject(&quot;mDefinitionToTMember&quot;, mDefinitionToTMember);&#xA;ruleresult.registerObject(&quot;mEnum&quot;, mEnum);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;mEnumToTEnum&quot;, mEnumToTEnum);&#xA;ruleresult.registerObject(&quot;tDefinition&quot;, tDefinition);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tName&quot;).eClass()).equals(&quot;basic.TField.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tSignature&quot;).eClass()).equals(&quot;basic.TFieldSignature.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tDefinition&quot;).eClass()).equals(&quot;basic.TFieldDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mModifier&quot;, mModifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mModifier&quot;,mModifier);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mModifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tModifier&quot;, tModifier);&#xA;match.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tModifier&quot;,tModifier);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mTypeToTType&quot;, mTypeToTType);&#xA;ruleresult.registerObject(&quot;mModifierToTModifier&quot;, mModifierToTModifier);&#xA;ruleresult.registerObject(&quot;mModifier&quot;, mModifier);&#xA;ruleresult.registerObject(&quot;tModifier&quot;, tModifier);&#xA;ruleresult.registerObject(&quot;tType&quot;, tType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tModifier&quot;).eClass()).equals(&quot;basic.TModifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;match.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mNestedType&quot;,mNestedType);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mNestedType&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tClass&quot;, tClass);&#xA;match.registerObject(&quot;tPackage&quot;, tPackage);&#xA;match.registerObject(&quot;pg&quot;, pg);&#xA;match.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tNestedType&quot;,tNestedType);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tClass&quot;, tClass);&#xA;ruleresult.registerObject(&quot;mNestedType&quot;, mNestedType);&#xA;ruleresult.registerObject(&quot;mASTNodeToAnnotatable&quot;, mASTNodeToAnnotatable);&#xA;ruleresult.registerObject(&quot;tPackage&quot;, tPackage);&#xA;ruleresult.registerObject(&quot;pg&quot;, pg);&#xA;ruleresult.registerObject(&quot;tNestedType&quot;, tNestedType);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;, eAnonymousClassDeclarationToTClass);&#xA;ruleresult.registerObject(&quot;eAnonymousClassDeclaration&quot;, eAnonymousClassDeclaration);&#xA;ruleresult.registerObject(&quot;mNestedTypeToTNestedType&quot;, mNestedTypeToTNestedType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tNestedType&quot;).eClass()).equals(&quot;basic.TInterface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedEnumInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedEnumInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedEnumInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedEnumInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedEnumInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedEnumInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xA;&#x9;var_eNestedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInClassVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInClassVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInClassVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tModifier_isStatic.setBound(false);&#xA;&#x9;var_tModifier_tVisibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;isStatic&quot;, var_tModifier_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;tVisibility&quot;, var_tModifier_tVisibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInClassVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInClassVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInClassVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModifier_static.setBound(false);&#xA;&#x9;var_mModifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;static&quot;, var_mModifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;visibility&quot;, var_mModifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsInt&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;int&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsInt&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;int&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterVariable&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterVariable&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;DataFlowIn&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;DataFlowIn&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonClassInCompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonClassInCompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TextAnnotations&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mComment&quot;, &quot;prefixOfParent&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment&quot;, true, csp);&#xA;var_mComment_content.setValue(__helper.getValue(&quot;mComment&quot;, &quot;content&quot;));&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText&quot;, true, csp);&#xA;var_tText_text.setValue(__helper.getValue(&quot;tText&quot;, &quot;text&quot;));&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TextAnnotations&quot;);&#xA;eq0.solve(var_mComment_content,var_tText_text);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tText_text.setBound(false);&#xA;&#x9;eq0.solve(var_mComment_content,var_tText_text);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tText&quot;, &quot;text&quot;, var_tText_text.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TextAnnotations&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mComment&quot;, &quot;prefixOfParent&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment&quot;, true, csp);&#xA;var_mComment_content.setValue(__helper.getValue(&quot;mComment&quot;, &quot;content&quot;));&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText&quot;, true, csp);&#xA;var_tText_text.setValue(__helper.getValue(&quot;tText&quot;, &quot;text&quot;));&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TextAnnotations&quot;);&#xA;eq0.solve(var_mComment_content,var_tText_text);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mComment_content.setBound(false);&#xA;&#x9;eq0.solve(var_mComment_content,var_tText_text);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mComment&quot;, &quot;content&quot;, var_mComment_content.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;ClassInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tLib.setBound(false);&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;ClassInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_proxy.setBound(false);&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsLong&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;long&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsLong&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;long&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousClassInType&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousClassInType&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tAnonymous_tLib.setBound(false);&#xA;&#x9;var_tAnonymous_tName.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tLib&quot;, var_tAnonymous_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tName&quot;, var_tAnonymous_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousClassInType&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousClassInType&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mAnonymous_index.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mAnonymous&quot;, &quot;index&quot;, var_mAnonymous_index.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedEnum&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedEnum&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayTypeToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayTypeToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueNumber&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tNumber&quot;));&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;tokenValue&quot;));&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueNumber&quot;);&#xA;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_tNumber.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;tNumber&quot;, var_tValue_tNumber.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueNumber&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tNumber&quot;));&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;tokenValue&quot;));&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueNumber&quot;);&#xA;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_tokenValue.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;tokenValue&quot;, var_mValue_tokenValue.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassFilePackageToNamespace&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassFilePackageToNamespace&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsByte&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;byte&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsByte&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;byte&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueString&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;escapedValue&quot;));&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tText.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tText&quot;));&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueString&quot;);&#xA;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_tText.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;tText&quot;, var_tValue_tText.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueString&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;escapedValue&quot;));&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tText.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tText&quot;));&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueString&quot;);&#xA;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_escapedValue.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;escapedValue&quot;, var_mValue_escapedValue.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SubPackageToPGPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage&quot;, true, csp);&#xA;var_tSubPackage_tName.setValue(__helper.getValue(&quot;tSubPackage&quot;, &quot;tName&quot;));&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage&quot;, true, csp);&#xA;var_mSubPackage_name.setValue(__helper.getValue(&quot;mSubPackage&quot;, &quot;name&quot;));&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubPackageToPGPackage&quot;);&#xA;eq0.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tSubPackage_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tSubPackage&quot;, &quot;tName&quot;, var_tSubPackage_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SubPackageToPGPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage&quot;, true, csp);&#xA;var_tSubPackage_tName.setValue(__helper.getValue(&quot;tSubPackage&quot;, &quot;tName&quot;));&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage&quot;, true, csp);&#xA;var_mSubPackage_name.setValue(__helper.getValue(&quot;mSubPackage&quot;, &quot;name&quot;));&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SubPackageToPGPackage&quot;);&#xA;eq0.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mSubPackage_name.setBound(false);&#xA;&#x9;eq0.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mSubPackage&quot;, &quot;name&quot;, var_mSubPackage_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInEnumVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInEnumVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInEnumVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tModifier_isStatic.setBound(false);&#xA;&#x9;var_tModifier_tVisibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;isStatic&quot;, var_tModifier_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;tVisibility&quot;, var_tModifier_tVisibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInEnumVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInEnumVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInEnumVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModifier_static.setBound(false);&#xA;&#x9;var_mModifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;static&quot;, var_mModifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;visibility&quot;, var_mModifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_local0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;local&quot;, csp);&#xA;var_local0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(__helper.getValue(&quot;tFieldSignature&quot;, &quot;upperBound&quot;));&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_local1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;local&quot;, csp);&#xA;var_local1.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(__helper.getValue(&quot;tFieldSignature&quot;, &quot;lowerBound&quot;));&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;FieldDefinition&quot;);&#xA;eq0.solve(var_tFieldSignature_upperBound,var_local0);&#xA;&#xA;eq1.setRuleName(&quot;FieldDefinition&quot;);&#xA;eq1.solve(var_tFieldSignature_lowerBound,var_local1);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;eq0.solve(var_tFieldSignature_upperBound,var_local0);&#xA;&#x9;eq1.solve(var_tFieldSignature_lowerBound,var_local1);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_local0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;local&quot;, csp);&#xA;var_local0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(__helper.getValue(&quot;tFieldSignature&quot;, &quot;upperBound&quot;));&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_local1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;local&quot;, csp);&#xA;var_local1.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(__helper.getValue(&quot;tFieldSignature&quot;, &quot;lowerBound&quot;));&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;FieldDefinition&quot;);&#xA;eq0.solve(var_tFieldSignature_upperBound,var_local0);&#xA;&#xA;eq1.setRuleName(&quot;FieldDefinition&quot;);&#xA;eq1.solve(var_tFieldSignature_lowerBound,var_local1);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;eq0.solve(var_tFieldSignature_upperBound,var_local0);&#xA;&#x9;eq1.solve(var_tFieldSignature_lowerBound,var_local1);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;ClassInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;ClassInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mNestedType_name.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mNestedType&quot;, &quot;name&quot;, var_mNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocationStaticType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocationStaticType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueClassArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueClassArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsChar&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;char&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsChar&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;char&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedInterface&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedInterface&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnitPackageToNamespace&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnitPackageToNamespace&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedInterfaceInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedInterfaceInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedInterfaceInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedInterfaceInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedInterfaceInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedInterfaceInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xA;&#x9;var_eNestedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeNested&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeNested&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnnotationTypeNested&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeNested&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeNested&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnnotationTypeNested&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xA;&#x9;var_eNestedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueBooleanArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_value.setValue(__helper.getValue(&quot;tValue&quot;, &quot;value&quot;));&#xA;var_tValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_value.setValue(__helper.getValue(&quot;mValue&quot;, &quot;value&quot;));&#xA;var_mValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueBooleanArray&quot;);&#xA;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_value.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;value&quot;, var_tValue_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueBooleanArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_value.setValue(__helper.getValue(&quot;tValue&quot;, &quot;value&quot;));&#xA;var_tValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_value.setValue(__helper.getValue(&quot;mValue&quot;, &quot;value&quot;));&#xA;var_mValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueBooleanArray&quot;);&#xA;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_value.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;value&quot;, var_mValue_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocationTarget&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocationTarget&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember&quot;, true, csp);&#xA;var_mMember_name.setValue(__helper.getValue(&quot;mMember&quot;, &quot;name&quot;));&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;UpperBound upperBound1 = new UpperBound();&#xA;csp.getConstraints().add(upperBound1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeMember&quot;);&#xA;eq0.solve(var_mMember_name,var_tName_tName);&#xA;&#xA;upperBound1.setRuleName(&quot;AnnotationTypeMember&quot;);&#xA;upperBound1.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tName_tName.setBound(false);&#xA;&#x9;var_tSignature_upperBound.setBound(false);&#xA;&#x9;eq0.solve(var_mMember_name,var_tName_tName);&#xA;&#x9;upperBound1.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tSignature&quot;, &quot;upperBound&quot;, var_tSignature_upperBound.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember&quot;, true, csp);&#xA;var_mMember_name.setValue(__helper.getValue(&quot;mMember&quot;, &quot;name&quot;));&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;UpperBound upperBound1 = new UpperBound();&#xA;csp.getConstraints().add(upperBound1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeMember&quot;);&#xA;eq0.solve(var_mMember_name,var_tName_tName);&#xA;&#xA;upperBound1.setRuleName(&quot;AnnotationTypeMember&quot;);&#xA;upperBound1.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mMember_name.setBound(false);&#xA;&#x9;var_mMember_name.setBound(false);&#xA;&#x9;eq0.solve(var_mMember_name,var_tName_tName);&#xA;&#x9;upperBound1.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mMember&quot;, &quot;name&quot;, var_mMember_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mMember&quot;, &quot;name&quot;, var_mMember_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessWrite&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.WRITE, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessWrite&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.WRITE, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodOverriding&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodOverriding&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;VariableDeclarationFragment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;VariableDeclarationFragment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameter&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tParameter&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter&quot;, true, csp);&#xA;var_tParameter_upperBound.setValue(__helper.getValue(&quot;tParameter&quot;, &quot;upperBound&quot;));&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;MethodParameter&quot;);&#xA;upperBound0.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tParameter_upperBound.setBound(false);&#xA;&#x9;upperBound0.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tParameter&quot;, &quot;upperBound&quot;, var_tParameter_upperBound.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameter&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tParameter&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter&quot;, true, csp);&#xA;var_tParameter_upperBound.setValue(__helper.getValue(&quot;tParameter&quot;, &quot;upperBound&quot;));&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;MethodParameter&quot;);&#xA;upperBound0.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;upperBound0.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceExtendsInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceExtendsInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassTypeInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassTypeInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xA;var_module_location.setValue(__helper.getValue(&quot;module&quot;, &quot;location&quot;));&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(__helper.getValue(&quot;cu&quot;, &quot;originalFilePath&quot;));&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ClassFileToModule&quot;);&#xA;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_module_location.setBound(false);&#xA;&#x9;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;module&quot;, &quot;location&quot;, var_module_location.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xA;var_module_location.setValue(__helper.getValue(&quot;module&quot;, &quot;location&quot;));&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(__helper.getValue(&quot;cu&quot;, &quot;originalFilePath&quot;));&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ClassFileToModule&quot;);&#xA;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_cu_originalFilePath.setBound(false);&#xA;&#x9;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;cu&quot;, &quot;originalFilePath&quot;, var_cu_originalFilePath.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterLinkFirst&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterLinkFirst&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsShort&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;short&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsShort&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;short&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SuperMethodInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SuperMethodInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedMethodDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod&quot;, true, csp);&#xA;var_mMethod_name.setValue(__helper.getValue(&quot;mMethod&quot;, &quot;name&quot;));&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName&quot;, true, csp);&#xA;var_tMethodName_tName.setValue(__helper.getValue(&quot;tMethodName&quot;, &quot;tName&quot;));&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedMethodDeclaration&quot;);&#xA;eq0.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tMethodName_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tMethodName&quot;, &quot;tName&quot;, var_tMethodName_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedMethodDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod&quot;, true, csp);&#xA;var_mMethod_name.setValue(__helper.getValue(&quot;mMethod&quot;, &quot;name&quot;));&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName&quot;, true, csp);&#xA;var_tMethodName_tName.setValue(__helper.getValue(&quot;tMethodName&quot;, &quot;tName&quot;));&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedMethodDeclaration&quot;);&#xA;eq0.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mMethod_name.setBound(false);&#xA;&#x9;eq0.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mMethod&quot;, &quot;name&quot;, var_mMethod_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;InterfaceVisibility interfaceVisibility1 = new InterfaceVisibility();&#xA;csp.getConstraints().add(interfaceVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceMember&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;interfaceVisibility1.setRuleName(&quot;InterfaceMember&quot;);&#xA;interfaceVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tModifier_isStatic.setBound(false);&#xA;&#x9;var_tModifier_tVisibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;interfaceVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;isStatic&quot;, var_tModifier_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;tVisibility&quot;, var_tModifier_tVisibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;InterfaceVisibility interfaceVisibility1 = new InterfaceVisibility();&#xA;csp.getConstraints().add(interfaceVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceMember&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;interfaceVisibility1.setRuleName(&quot;InterfaceMember&quot;);&#xA;interfaceVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModifier_static.setBound(false);&#xA;&#x9;var_mModifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;interfaceVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;static&quot;, var_mModifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;visibility&quot;, var_mModifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldName&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xA;var_tField_tName.setValue(__helper.getValue(&quot;tField&quot;, &quot;tName&quot;));&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName&quot;, true, csp);&#xA;var_mFieldName_mName.setValue(__helper.getValue(&quot;mFieldName&quot;, &quot;mName&quot;));&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;FieldName&quot;);&#xA;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tField_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tField&quot;, &quot;tName&quot;, var_tField_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldName&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField&quot;, true, csp);&#xA;var_tField_tName.setValue(__helper.getValue(&quot;tField&quot;, &quot;tName&quot;));&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName&quot;, true, csp);&#xA;var_mFieldName_mName.setValue(__helper.getValue(&quot;mFieldName&quot;, &quot;mName&quot;));&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;FieldName&quot;);&#xA;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mFieldName_mName.setBound(false);&#xA;&#x9;eq0.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mFieldName&quot;, &quot;mName&quot;, var_mFieldName_mName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeInClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeInClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessRead&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.READ, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessRead&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.READ, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkDefinitionToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkDefinitionToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;AnnotationTypeInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;AnnotationTypeInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mNestedType_name.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mNestedType&quot;, &quot;name&quot;, var_mNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterLink&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodParameterLink&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberKey&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_name.setValue(__helper.getValue(&quot;mValue&quot;, &quot;name&quot;));&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue&quot;, true, csp);&#xA;var_tAnnotationValue_tKey.setValue(__helper.getValue(&quot;tAnnotationValue&quot;, &quot;tKey&quot;));&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberKey&quot;);&#xA;eq0.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tAnnotationValue_tKey.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnnotationValue&quot;, &quot;tKey&quot;, var_tAnnotationValue_tKey.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberKey&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_name.setValue(__helper.getValue(&quot;mValue&quot;, &quot;name&quot;));&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue&quot;, true, csp);&#xA;var_tAnnotationValue_tKey.setValue(__helper.getValue(&quot;tAnnotationValue&quot;, &quot;tKey&quot;));&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberKey&quot;);&#xA;eq0.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_name.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;name&quot;, var_mValue_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonClassInClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonClassInClassFileToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsDouble&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;double&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsDouble&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;double&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueStringArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tText.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tText&quot;));&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;escapedValue&quot;));&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueStringArray&quot;);&#xA;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_tText.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;tText&quot;, var_tValue_tText.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueStringArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tText.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tText&quot;));&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;escapedValue&quot;));&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueStringArray&quot;);&#xA;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_escapedValue.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;escapedValue&quot;, var_mValue_escapedValue.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodSignature&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;MethodSignature&quot;);&#xA;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tSignature_upperBound.setBound(false);&#xA;&#x9;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tSignature&quot;, &quot;upperBound&quot;, var_tSignature_upperBound.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodSignature&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;MethodSignature&quot;);&#xA;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SyntethicMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SyntethicMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xA;var_module_location.setValue(__helper.getValue(&quot;module&quot;, &quot;location&quot;));&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(__helper.getValue(&quot;cu&quot;, &quot;originalFilePath&quot;));&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;CompilationUnitToModule&quot;);&#xA;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_module_location.setBound(false);&#xA;&#x9;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;module&quot;, &quot;location&quot;, var_module_location.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module&quot;, true, csp);&#xA;var_module_location.setValue(__helper.getValue(&quot;module&quot;, &quot;location&quot;));&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(__helper.getValue(&quot;cu&quot;, &quot;originalFilePath&quot;));&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;CompilationUnitToModule&quot;);&#xA;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_cu_originalFilePath.setBound(false);&#xA;&#x9;eq0.solve(var_cu_originalFilePath,var_module_location);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;cu&quot;, &quot;originalFilePath&quot;, var_cu_originalFilePath.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodName&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName&quot;, true, csp);&#xA;var_mName_mName.setValue(__helper.getValue(&quot;mName&quot;, &quot;mName&quot;));&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;MethodName&quot;);&#xA;eq0.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tName_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mName_mName,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodName&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName&quot;, true, csp);&#xA;var_mName_mName.setValue(__helper.getValue(&quot;mName&quot;, &quot;mName&quot;));&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;MethodName&quot;);&#xA;eq0.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mName_mName.setBound(false);&#xA;&#x9;eq0.solve(var_mName_mName,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mName&quot;, &quot;mName&quot;, var_mName_mName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldSignature&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;FieldSignature&quot;);&#xA;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tSignature_upperBound.setBound(false);&#xA;&#x9;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tSignature&quot;, &quot;upperBound&quot;, var_tSignature_upperBound.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldSignature&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tSignature&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(__helper.getValue(&quot;tSignature&quot;, &quot;upperBound&quot;));&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;UpperBound upperBound0 = new UpperBound();&#xA;csp.getConstraints().add(upperBound0);&#xA;&#xA;upperBound0.setRuleName(&quot;FieldSignature&quot;);&#xA;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;upperBound0.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassImplementsInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassImplementsInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInnerClassMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tLib&quot;));&#xA;var_tInnerClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;proxy&quot;));&#xA;var_mInnerClass_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;name&quot;));&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInnerClassMember&quot;);&#xA;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#xA;concat1.setRuleName(&quot;ClassInnerClassMember&quot;);&#xA;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tInnerClass_tLib.setBound(false);&#xA;&#x9;var_tInnerClass_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tLib&quot;, var_tInnerClass_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tName&quot;, var_tInnerClass_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInnerClassMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tLib&quot;));&#xA;var_tInnerClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;proxy&quot;));&#xA;var_mInnerClass_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;name&quot;));&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInnerClassMember&quot;);&#xA;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#xA;concat1.setRuleName(&quot;ClassInnerClassMember&quot;);&#xA;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mInnerClass_proxy.setBound(false);&#xA;&#x9;var_mInnerClass_name.setBound(false);&#xA;&#x9;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mInnerClass&quot;, &quot;proxy&quot;, var_mInnerClass_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mInnerClass&quot;, &quot;name&quot;, var_mInnerClass_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition&quot;, true, csp);&#xA;var_tDefinition_upperBound.setValue(__helper.getValue(&quot;tDefinition&quot;, &quot;upperBound&quot;));&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition&quot;, true, csp);&#xA;var_tDefinition_lowerBound.setValue(__helper.getValue(&quot;tDefinition&quot;, &quot;lowerBound&quot;));&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(__helper.getValue(&quot;tMethodSignature&quot;, &quot;lowerBound&quot;));&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(__helper.getValue(&quot;tMethodSignature&quot;, &quot;upperBound&quot;));&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;MethodDefinition&quot;);&#xA;eq0.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;&#xA;eq1.setRuleName(&quot;MethodDefinition&quot;);&#xA;eq1.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tDefinition_upperBound.setBound(false);&#xA;&#x9;var_tDefinition_lowerBound.setBound(false);&#xA;&#x9;eq0.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;&#x9;eq1.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tDefinition&quot;, &quot;upperBound&quot;, var_tDefinition_upperBound.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tDefinition&quot;, &quot;lowerBound&quot;, var_tDefinition_lowerBound.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition&quot;, true, csp);&#xA;var_tDefinition_upperBound.setValue(__helper.getValue(&quot;tDefinition&quot;, &quot;upperBound&quot;));&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition&quot;, true, csp);&#xA;var_tDefinition_lowerBound.setValue(__helper.getValue(&quot;tDefinition&quot;, &quot;lowerBound&quot;));&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(__helper.getValue(&quot;tMethodSignature&quot;, &quot;lowerBound&quot;));&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(__helper.getValue(&quot;tMethodSignature&quot;, &quot;upperBound&quot;));&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;MethodDefinition&quot;);&#xA;eq0.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;&#xA;eq1.setRuleName(&quot;MethodDefinition&quot;);&#xA;eq1.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;eq0.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;&#x9;eq1.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInstanceCreation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInstanceCreation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;boolean&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;boolean&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;InterfaceInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tLib.setBound(false);&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;InterfaceInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_proxy.setBound(false);&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;EnumInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;EnumInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mNestedType_name.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mNestedType&quot;, &quot;name&quot;, var_mNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PackageToPGPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage&quot;, true, csp);&#xA;var_tPackage_tName.setValue(__helper.getValue(&quot;tPackage&quot;, &quot;tName&quot;));&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PackageToPGPackage&quot;);&#xA;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tPackage_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tPackage&quot;, &quot;tName&quot;, var_tPackage_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PackageToPGPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage&quot;, true, csp);&#xA;var_tPackage_tName.setValue(__helper.getValue(&quot;tPackage&quot;, &quot;tName&quot;));&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage&quot;, true, csp);&#xA;var_mPackage_name.setValue(__helper.getValue(&quot;mPackage&quot;, &quot;name&quot;));&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PackageToPGPackage&quot;);&#xA;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mPackage_name.setBound(false);&#xA;&#x9;eq0.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mPackage&quot;, &quot;name&quot;, var_mPackage_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedInterfaceDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;name&quot;));&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;proxy&quot;));&#xA;var_unresolvedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedInterfaceDeclaration&quot;);&#xA;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedInterfaceDeclaration&quot;);&#xA;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tClass_tLib.setBound(false);&#xA;&#x9;var_tClass_tName.setBound(false);&#xA;&#x9;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#x9;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tLib&quot;, var_tClass_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tName&quot;, var_tClass_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedInterfaceDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;name&quot;));&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;proxy&quot;));&#xA;var_unresolvedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedInterfaceDeclaration&quot;);&#xA;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedInterfaceDeclaration&quot;);&#xA;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_unresolvedType_proxy.setBound(false);&#xA;&#x9;var_unresolvedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#x9;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;unresolvedType&quot;, &quot;proxy&quot;, var_unresolvedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;unresolvedType&quot;, &quot;name&quot;, var_unresolvedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;DataFlowOut&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;DataFlowOut&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassExtendsClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassExtendsClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueAnnotationArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueAnnotationArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkDefinitionToAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkDefinitionToAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnSelf&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnSelf&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnBodyDecl&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnBodyDecl&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeAccessOnAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassImplementsPatrameterizedInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassImplementsPatrameterizedInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedClass&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;OrphanedClass&quot;);&#xA;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedTypeToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedTypeToType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Annotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Annotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPackageLang&quot;, &quot;tName&quot;, &quot;lang&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;object&quot;, &quot;name&quot;, &quot;Object&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPackageJava&quot;, &quot;tName&quot;, &quot;java&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;Object&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPackageLang&quot;, &quot;tName&quot;, &quot;lang&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;object&quot;, &quot;name&quot;, &quot;Object&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPackageJava&quot;, &quot;tName&quot;, &quot;java&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tClass&quot;, &quot;tName&quot;, &quot;Object&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassTypeClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassTypeClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessReadWrite&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.READWRITE, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldAccessReadWrite&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;mAccess&quot;, &quot;accessKind&quot;, AccessKind.READWRITE, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayInitializerIgnoreExpressionsEdge&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayInitializerIgnoreExpressionsEdge&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousClassInAnonymous&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousClassInAnonymous&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tAnonymous_tLib.setBound(false);&#xA;&#x9;var_tAnonymous_tName.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tLib&quot;, var_tAnonymous_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tName&quot;, var_tAnonymous_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClassInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousClassInAnonymous&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousClassInAnonymous&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mAnonymous_index.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mAnonymous&quot;, &quot;index&quot;, var_mAnonymous_index.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InitializerInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModifier&quot;, &quot;isStatic&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;.initializer&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddSuffix addSuffix0 = new AddSuffix();&#xA;csp.getConstraints().add(addSuffix0);&#xA;&#xA;addSuffix0.setRuleName(&quot;InitializerInType&quot;);&#xA;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tName_tName.setBound(false);&#xA;&#x9;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InitializerInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModifier&quot;, &quot;isStatic&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;.initializer&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddSuffix addSuffix0 = new AddSuffix();&#xA;csp.getConstraints().add(addSuffix0);&#xA;&#xA;addSuffix0.setRuleName(&quot;InitializerInType&quot;);&#xA;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SuperConstructorInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SuperConstructorInvocation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FlowNode&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FlowNode&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsFloat&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;float&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeIsFloat&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;float&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ModelToPg&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;proxies&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel&quot;, true, csp);&#xA;var_mModel_name.setValue(__helper.getValue(&quot;mModel&quot;, &quot;name&quot;));&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG&quot;, true, csp);&#xA;var_tPG_tName.setValue(__helper.getValue(&quot;tPG&quot;, &quot;tName&quot;));&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelToPg&quot;);&#xA;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tPG_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tPG&quot;, &quot;tName&quot;, var_tPG_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ModelToPg&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;proxies&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel&quot;, true, csp);&#xA;var_mModel_name.setValue(__helper.getValue(&quot;mModel&quot;, &quot;name&quot;));&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG&quot;, true, csp);&#xA;var_tPG_tName.setValue(__helper.getValue(&quot;tPG&quot;, &quot;tName&quot;));&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelToPg&quot;);&#xA;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModel_name.setBound(false);&#xA;&#x9;eq0.solve(var_mModel_name,var_tPG_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModel&quot;, &quot;name&quot;, var_mModel_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tDefinition&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tDefinition&quot;, &quot;upperBound&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDefinition&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tDefinition&quot;, &quot;lowerBound&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tDefinition&quot;, &quot;upperBound&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_value.setValue(__helper.getValue(&quot;tValue&quot;, &quot;value&quot;));&#xA;var_tValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_value.setValue(__helper.getValue(&quot;mValue&quot;, &quot;value&quot;));&#xA;var_mValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueBoolean&quot;);&#xA;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_value.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;value&quot;, var_tValue_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_value.setValue(__helper.getValue(&quot;tValue&quot;, &quot;value&quot;));&#xA;var_tValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_value.setValue(__helper.getValue(&quot;mValue&quot;, &quot;value&quot;));&#xA;var_mValue_value.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueBoolean&quot;);&#xA;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_value.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_value,var_tValue_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;value&quot;, var_mValue_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;EnumInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;EnumInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tLib.setBound(false);&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;EnumInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;EnumInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_proxy.setBound(false);&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInAnnotationVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInAnnotationVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInAnnotationVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tModifier_isStatic.setBound(false);&#xA;&#x9;var_tModifier_tVisibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;isStatic&quot;, var_tModifier_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;tVisibility&quot;, var_tModifier_tVisibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MemberInAnnotationVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;MemberInAnnotationVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;MemberInAnnotationVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModifier_static.setBound(false);&#xA;&#x9;var_mModifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;static&quot;, var_mModifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;visibility&quot;, var_mModifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypesIsVoid&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;void&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypesIsVoid&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;primitives&quot;, &quot;location&quot;, &quot;${JVM.PRIMITIVES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tName&quot;, &quot;void&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tPrimitiveClass&quot;, &quot;tLib&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedClassInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedClassInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedClassInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tLib.setBound(false);&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tLib&quot;, var_tNestedType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;NestedClassInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tLib&quot;));&#xA;var_tNestedType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;proxy&quot;));&#xA;var_eNestedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType&quot;, true, csp);&#xA;var_eNestedType_name.setValue(__helper.getValue(&quot;eNestedType&quot;, &quot;name&quot;));&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(__helper.getValue(&quot;tOuterType&quot;, &quot;tName&quot;));&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;NestedClassInType&quot;);&#xA;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#xA;concat1.setRuleName(&quot;NestedClassInType&quot;);&#xA;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_eNestedType_proxy.setBound(false);&#xA;&#x9;var_eNestedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;proxy&quot;, var_eNestedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;eNestedType&quot;, &quot;name&quot;, var_eNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationTypeInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tType_tLib.setBound(false);&#xA;&#x9;var_tType_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tLib&quot;, var_tType_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tType&quot;, &quot;tName&quot;, var_tType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_proxy.setValue(__helper.getValue(&quot;mType&quot;, &quot;proxy&quot;));&#xA;var_mType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeInPackage&quot;);&#xA;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationTypeInPackage&quot;);&#xA;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_proxy.setBound(false);&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_proxy,var_tType_tLib);&#xA;&#x9;eq1.solve(var_mType_name,var_tType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;proxy&quot;, var_mType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeInCompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeInCompilationUnitToModule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InitializerInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModifier&quot;, &quot;isStatic&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;.initializer&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddSuffix addSuffix0 = new AddSuffix();&#xA;csp.getConstraints().add(addSuffix0);&#xA;&#xA;addSuffix0.setRuleName(&quot;InitializerInAnonymous&quot;);&#xA;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tName_tName.setBound(false);&#xA;&#x9;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InitializerInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModifier&quot;, &quot;isStatic&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;.initializer&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;AddSuffix addSuffix0 = new AddSuffix();&#xA;csp.getConstraints().add(addSuffix0);&#xA;&#xA;addSuffix0.setRuleName(&quot;InitializerInAnonymous&quot;);&#xA;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;addSuffix0.solve(var_tType_tName,var_literal0,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInnerAnonClassMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tLib&quot;));&#xA;var_tInnerClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;proxy&quot;));&#xA;var_mInnerClass_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;name&quot;));&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInnerAnonClassMember&quot;);&#xA;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#xA;concat1.setRuleName(&quot;ClassInnerAnonClassMember&quot;);&#xA;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tInnerClass_tLib.setBound(false);&#xA;&#x9;var_tInnerClass_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tLib&quot;, var_tInnerClass_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tInnerClass&quot;, &quot;tName&quot;, var_tInnerClass_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassInnerAnonClassMember&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tLib&quot;));&#xA;var_tInnerClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;proxy&quot;));&#xA;var_mInnerClass_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(__helper.getValue(&quot;mInnerClass&quot;, &quot;name&quot;));&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(__helper.getValue(&quot;tInnerClass&quot;, &quot;tName&quot;));&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(__helper.getValue(&quot;tOuterClass&quot;, &quot;tName&quot;));&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;ClassInnerAnonClassMember&quot;);&#xA;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#xA;concat1.setRuleName(&quot;ClassInnerAnonClassMember&quot;);&#xA;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mInnerClass_proxy.setBound(false);&#xA;&#x9;var_mInnerClass_name.setBound(false);&#xA;&#x9;eq0.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mInnerClass&quot;, &quot;proxy&quot;, var_mInnerClass_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mInnerClass&quot;, &quot;name&quot;, var_mInnerClass_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueNumberArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;tokenValue&quot;));&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tNumber&quot;));&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueNumberArray&quot;);&#xA;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tValue_tNumber.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tValue&quot;, &quot;tNumber&quot;, var_tValue_tNumber.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueNumberArray&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(__helper.getValue(&quot;mValue&quot;, &quot;tokenValue&quot;));&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(__helper.getValue(&quot;tValue&quot;, &quot;tNumber&quot;));&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationMemberValueNumberArray&quot;);&#xA;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mValue_tokenValue.setBound(false);&#xA;&#x9;eq0.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mValue&quot;, &quot;tokenValue&quot;, var_mValue_tokenValue.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedClassDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;name&quot;));&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;proxy&quot;));&#xA;var_unresolvedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedClassDeclaration&quot;);&#xA;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedClassDeclaration&quot;);&#xA;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tClass_tLib.setBound(false);&#xA;&#x9;var_tClass_tName.setBound(false);&#xA;&#x9;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#x9;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tLib&quot;, var_tClass_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tClass&quot;, &quot;tName&quot;, var_tClass_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedClassDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;tModule&quot;, &quot;location&quot;, &quot;${PROXIES}&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tLib.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tLib&quot;));&#xA;var_tClass_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;name&quot;));&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(__helper.getValue(&quot;unresolvedType&quot;, &quot;proxy&quot;));&#xA;var_unresolvedType_proxy.setType(&quot;boolean&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedClassDeclaration&quot;);&#xA;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#xA;eq1.setRuleName(&quot;UnresolvedClassDeclaration&quot;);&#xA;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_unresolvedType_proxy.setBound(false);&#xA;&#x9;var_unresolvedType_name.setBound(false);&#xA;&#x9;eq0.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;&#x9;eq1.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;unresolvedType&quot;, &quot;proxy&quot;, var_unresolvedType_proxy.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;unresolvedType&quot;, &quot;name&quot;, var_unresolvedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationMemberValueAnnotation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousEnumConstant&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousEnumConstant&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousEnumConstant&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tAnonymous_tLib.setBound(false);&#xA;&#x9;var_tAnonymous_tName.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tLib&quot;, var_tAnonymous_tLib.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tAnonymous&quot;, &quot;tName&quot;, var_tAnonymous_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousEnumConstant&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tLib&quot;));&#xA;var_tAnonymous_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tLib.setValue(__helper.getValue(&quot;tType&quot;, &quot;tLib&quot;));&#xA;var_tType_tLib.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(__helper.getValue(&quot;tAnonymous&quot;, &quot;tName&quot;));&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType&quot;, true, csp);&#xA;var_tType_tName.setValue(__helper.getValue(&quot;tType&quot;, &quot;tName&quot;));&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(__helper.getValue(&quot;mAnonymous&quot;, &quot;index&quot;));&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Concat concat1 = new Concat();&#xA;csp.getConstraints().add(concat1);&#xA;&#xA;eq0.setRuleName(&quot;AnonymousEnumConstant&quot;);&#xA;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#xA;concat1.setRuleName(&quot;AnonymousEnumConstant&quot;);&#xA;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mAnonymous_index.setBound(false);&#xA;&#x9;eq0.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;&#x9;concat1.solve(var_literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mAnonymous&quot;, &quot;index&quot;, var_mAnonymous_index.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumConstant&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition&quot;, true, csp);&#xA;var_mDefinition_name.setValue(__helper.getValue(&quot;mDefinition&quot;, &quot;name&quot;));&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;EnumConstant&quot;);&#xA;eq0.solve(var_mDefinition_name,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tName_tName.setBound(false);&#xA;&#x9;eq0.solve(var_mDefinition_name,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tName&quot;, &quot;tName&quot;, var_tName_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumConstant&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition&quot;, true, csp);&#xA;var_mDefinition_name.setValue(__helper.getValue(&quot;mDefinition&quot;, &quot;name&quot;));&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName&quot;, true, csp);&#xA;var_tName_tName.setValue(__helper.getValue(&quot;tName&quot;, &quot;tName&quot;));&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;EnumConstant&quot;);&#xA;eq0.solve(var_mDefinition_name,var_tName_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mDefinition_name.setBound(false);&#xA;&#x9;eq0.solve(var_mDefinition_name,var_tName_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mDefinition&quot;, &quot;name&quot;, var_mDefinition_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypesVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;TypesVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;TypesVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tModifier_isStatic.setBound(false);&#xA;&#x9;var_tModifier_tVisibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;isStatic&quot;, var_tModifier_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;tModifier&quot;, &quot;tVisibility&quot;, var_tModifier_tVisibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypesVisibility&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;isStatic&quot;));&#xA;var_tModifier_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_static.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;static&quot;));&#xA;var_mModifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(__helper.getValue(&quot;mModifier&quot;, &quot;visibility&quot;));&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(__helper.getValue(&quot;tModifier&quot;, &quot;tVisibility&quot;));&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;DefaultVisibility defaultVisibility1 = new DefaultVisibility();&#xA;csp.getConstraints().add(defaultVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;TypesVisibility&quot;);&#xA;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#xA;defaultVisibility1.setRuleName(&quot;TypesVisibility&quot;);&#xA;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mModifier_static.setBound(false);&#xA;&#x9;var_mModifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;&#x9;defaultVisibility1.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;static&quot;, var_mModifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;mModifier&quot;, &quot;visibility&quot;, var_mModifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;InterfaceInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tNestedType_tName.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tNestedType&quot;, &quot;tName&quot;, var_tNestedType_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType&quot;, true, csp);&#xA;var_mNestedType_name.setValue(__helper.getValue(&quot;mNestedType&quot;, &quot;name&quot;));&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;$&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass&quot;, true, csp);&#xA;var_tClass_tName.setValue(__helper.getValue(&quot;tClass&quot;, &quot;tName&quot;));&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(__helper.getValue(&quot;tNestedType&quot;, &quot;tName&quot;));&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;InterfaceInAnonymous&quot;);&#xA;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mNestedType_name.setBound(false);&#xA;&#x9;concat0.solve(var_literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mNestedType&quot;, &quot;name&quot;, var_mNestedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment.content&quot;, true, csp);&#xA;var_mComment_content.setValue(mComment.getContent());&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText.text&quot;, true, csp);&#xA;var_tText_text.setValue(tText.getText());&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mComment_content,var_tText_text);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(mValue.getTokenValue());&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(tValue.getTNumber());&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(mValue.getEscapedValue());&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, true, csp);&#xA;var_tValue_tText.setValue(tValue.getTText());&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage.name&quot;, true, csp);&#xA;var_mSubPackage_name.setValue(mSubPackage.getName());&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage.tName&quot;, true, csp);&#xA;var_tSubPackage_tName.setValue(tSubPackage.getTName());&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.upperBound&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(tFieldSignature.getUpperBound());&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.lowerBound&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(tFieldSignature.getLowerBound());&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;upperBound&quot;, csp);&#xA;var_upperBound.setType(&quot;int&quot;);&#xA;Variable var_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lowerBound&quot;, csp);&#xA;var_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tFieldSignature_upperBound,var_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tFieldSignature_lowerBound,var_lowerBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, true, csp);&#xA;var_mValue_value.setValue(mValue.isValue());&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, true, csp);&#xA;var_tValue_value.setValue(tValue.isValue());&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember.name&quot;, true, csp);&#xA;var_mMember_name.setValue(mMember.getName());&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMember_name,var_tName_tName);&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mMember_name,var_tSignature_upperBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter.upperBound&quot;, true, csp);&#xA;var_tParameter_upperBound.setValue(tParameter.getUpperBound());&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tParameter_upperBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(cu.getOriginalFilePath());&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, true, csp);&#xA;var_module_location.setValue(module.getLocation());&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod.name&quot;, true, csp);&#xA;var_mMethod_name.setValue(mMethod.getName());&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName.tName&quot;, true, csp);&#xA;var_tMethodName_tName.setValue(tMethodName.getTName());&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMethod_name,var_tMethodName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;InterfaceVisibility interfaceVisibility = new InterfaceVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(interfaceVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;interfaceVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;interfaceVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, true, csp);&#xA;var_mFieldName_mName.setValue(mFieldName.getMName());&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, true, csp);&#xA;var_tField_tName.setValue(tField.getTName());&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.name&quot;, true, csp);&#xA;var_mValue_name.setValue(mValue.getName());&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue.tKey&quot;, true, csp);&#xA;var_tAnnotationValue_tKey.setValue(tAnnotationValue.getTKey());&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, true, csp);&#xA;var_mValue_escapedValue.setValue(mValue.getEscapedValue());&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, true, csp);&#xA;var_tValue_tText.setValue(tValue.getTText());&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, true, csp);&#xA;var_cu_originalFilePath.setValue(cu.getOriginalFilePath());&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, true, csp);&#xA;var_module_location.setValue(module.getLocation());&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, true, csp);&#xA;var_mName_mName.setValue(mName.getMName());&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, true, csp);&#xA;var_tSignature_upperBound.setValue(tSignature.getUpperBound());&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(mInnerClass.isProxy());&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(tInnerClass.isTLib());&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(mInnerClass.getName());&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.upperBound&quot;, true, csp);&#xA;var_tDefinition_upperBound.setValue(tDefinition.getUpperBound());&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.upperBound&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(tMethodSignature.getUpperBound());&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.lowerBound&quot;, true, csp);&#xA;var_tDefinition_lowerBound.setValue(tDefinition.getLowerBound());&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.lowerBound&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(tMethodSignature.getLowerBound());&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, true, csp);&#xA;var_mPackage_name.setValue(mPackage.getName());&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, true, csp);&#xA;var_tPackage_tName.setValue(tPackage.getTName());&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(unresolvedType.isProxy());&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(unresolvedType.getName());&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, true, csp);&#xA;var_mModel_name.setValue(mModel.getName());&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, true, csp);&#xA;var_tPG_tName.setValue(tPG.getTName());&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, true, csp);&#xA;var_mValue_value.setValue(mValue.isValue());&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, true, csp);&#xA;var_tValue_value.setValue(tValue.isValue());&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, true, csp);&#xA;var_eNestedType_proxy.setValue(eNestedType.isProxy());&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, true, csp);&#xA;var_tNestedType_tLib.setValue(tNestedType.isTLib());&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, true, csp);&#xA;var_eNestedType_name.setValue(eNestedType.getName());&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, true, csp);&#xA;var_mType_proxy.setValue(mType.isProxy());&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, true, csp);&#xA;var_mInnerClass_proxy.setValue(mInnerClass.isProxy());&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, true, csp);&#xA;var_tInnerClass_tLib.setValue(tInnerClass.isTLib());&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, true, csp);&#xA;var_mInnerClass_name.setValue(mInnerClass.getName());&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, true, csp);&#xA;var_tInnerClass_tName.setValue(tInnerClass.getTName());&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, true, csp);&#xA;var_mValue_tokenValue.setValue(mValue.getTokenValue());&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, true, csp);&#xA;var_tValue_tNumber.setValue(tValue.getTNumber());&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, true, csp);&#xA;var_unresolvedType_proxy.setValue(unresolvedType.isProxy());&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, true, csp);&#xA;var_tClass_tLib.setValue(tClass.isTLib());&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, true, csp);&#xA;var_unresolvedType_name.setValue(unresolvedType.getName());&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, true, csp);&#xA;var_tAnonymous_tLib.setValue(tAnonymous.isTLib());&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, true, csp);&#xA;var_mAnonymous_index.setValue(mAnonymous.getIndex());&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, true, csp);&#xA;var_tAnonymous_tName.setValue(tAnonymous.getTName());&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition.name&quot;, true, csp);&#xA;var_mDefinition_name.setValue(mDefinition.getName());&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, true, csp);&#xA;var_tName_tName.setValue(tName.getTName());&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mDefinition_name,var_tName_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, true, csp);&#xA;var_mModifier_static.setValue(mModifier.isStatic());&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, true, csp);&#xA;var_tModifier_isStatic.setValue(tModifier.isIsStatic());&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, true, csp);&#xA;var_mModifier_visibility.setValue(mModifier.getVisibility());&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, true, csp);&#xA;var_tModifier_tVisibility.setValue(tModifier.getTVisibility());&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, true, csp);&#xA;var_mNestedType_name.setValue(mNestedType.getName());&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, true, csp);&#xA;var_tNestedType_tName.setValue(tNestedType.getTName());&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedEnumInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInClassVisibility/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsInt/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;mEntryToTParameter&quot;,mEntryToTParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterVariable/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowIn/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInCompilationUnitToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mComment_content = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mComment.content&quot;, csp);&#xA;var_mComment_content.setType(&quot;String&quot;);&#xA;Variable var_tText_text = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tText.text&quot;, csp);&#xA;var_tText_text.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mComment_content,var_tText_text);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TextAnnotations/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsLong/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedEnum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tModel&quot;,tModel);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayTypeToType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, csp);&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, csp);&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumber/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFilePackageToNamespace/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsByte/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, csp);&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, csp);&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueString/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mSubPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mSubPackage.name&quot;, csp);&#xA;var_mSubPackage_name.setType(&quot;String&quot;);&#xA;Variable var_tSubPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSubPackage.tName&quot;, csp);&#xA;var_tSubPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mSubPackage_name,var_tSubPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mParentPackage&quot;,mParentPackage);&#xA;isApplicableMatch.registerObject(&quot;tParentPackage&quot;,tParentPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mParentPackageToTParent&quot;,mParentPackageToTParent);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SubPackageToPGPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInEnumVisibility/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tFieldSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.upperBound&quot;, true, csp);&#xA;var_tFieldSignature_upperBound.setValue(tFieldSignature.getUpperBound());&#xA;var_tFieldSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tFieldSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tFieldSignature.lowerBound&quot;, true, csp);&#xA;var_tFieldSignature_lowerBound.setValue(tFieldSignature.getLowerBound());&#xA;var_tFieldSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;upperBound&quot;, csp);&#xA;var_upperBound.setType(&quot;int&quot;);&#xA;Variable var_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lowerBound&quot;, csp);&#xA;var_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tFieldSignature_upperBound,var_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tFieldSignature_lowerBound,var_lowerBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTFieldSignature&quot;,mSignatureToTFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;tFieldSignature&quot;,tFieldSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldDefinition/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tStaticType&quot;,tStaticType);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mStaticTypeTotStaticType&quot;,mStaticTypeTotStaticType);&#xA;isApplicableMatch.registerObject(&quot;mStaticType&quot;,mStaticType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationStaticType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClassArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsChar/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;tp&quot;,tp);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitPackageToNamespace/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedInterfaceInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeNested/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, csp);&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, csp);&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBooleanArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocationToTAccess&quot;,invocationToTAccess);&#xA;isApplicableMatch.registerObject(&quot;tAccess&quot;,tAccess);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMemberToTInvokedMember&quot;,mInvokedMemberToTInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;tInvokedMember&quot;,tInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;mInvokedMember&quot;,mInvokedMember);&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocationTarget/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mMember_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMember.name&quot;, csp);&#xA;var_mMember_name.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMember_name,var_tName_tName);&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mMember_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToType&quot;,mTypeToType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationToAnnotation&quot;,mAnnotationToAnnotation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeMember/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessWrite/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOverriding&quot;,mOverriding);&#xA;isApplicableMatch.registerObject(&quot;tOverriding&quot;,tOverriding);&#xA;isApplicableMatch.registerObject(&quot;mMethod&quot;,mMethod);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;tMethod&quot;,tMethod);&#xA;isApplicableMatch.registerObject(&quot;mOverridingToTOverriding&quot;,mOverridingToTOverriding);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodOverriding/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTFieldDefinition&quot;,eFieldDeclarationToTFieldDefinition);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/VariableDeclarationFragment/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorInvocation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tParameter_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tParameter.upperBound&quot;, csp);&#xA;var_tParameter_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tParameter_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSiganture&quot;,tSiganture);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameter/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclaration&quot;,eInterfaceDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;eInterfaceDeclarationToTInterface&quot;,eInterfaceDeclarationToTInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceExtendsInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodInvocation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, csp);&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, csp);&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassFileToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mParameterList&quot;,mParameterList);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLinkFirst/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsShort/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperMethodInvocation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mMethod_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mMethod.name&quot;, csp);&#xA;var_mMethod_name.setType(&quot;String&quot;);&#xA;Variable var_tMethodName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodName.tName&quot;, csp);&#xA;var_tMethodName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mMethod_name,var_tMethodName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;model2pm&quot;,model2pm);&#xA;isApplicableMatch.registerObject(&quot;tModel&quot;,tModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedMethodDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;InterfaceVisibility interfaceVisibility = new InterfaceVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(interfaceVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;interfaceVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;interfaceVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tInterface&quot;,tInterface);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mInterface&quot;,mInterface);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceMember/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mFieldName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mFieldName.mName&quot;, csp);&#xA;var_mFieldName_mName.setType(&quot;String&quot;);&#xA;Variable var_tField_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tField.tName&quot;, csp);&#xA;var_tField_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mFieldName_mName,var_tField_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;modelToTypeGraph&quot;,modelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldName/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInClassFileToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessRead/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mmethodSignatureToTMethodSignature&quot;,mmethodSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mPrevEntry&quot;,mPrevEntry);&#xA;isApplicableMatch.registerObject(&quot;tPrevParameter&quot;,tPrevParameter);&#xA;isApplicableMatch.registerObject(&quot;mEntry&quot;,mEntry);&#xA;isApplicableMatch.registerObject(&quot;tParameter&quot;,tParameter);&#xA;isApplicableMatch.registerObject(&quot;eSingleVariableDeclarationToTParameter&quot;,eSingleVariableDeclarationToTParameter);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodParameterLink/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.name&quot;, csp);&#xA;var_mValue_name.setType(&quot;String&quot;);&#xA;Variable var_tAnnotationValue_tKey = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnnotationValue.tKey&quot;, csp);&#xA;var_tAnnotationValue_tKey.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_name,var_tAnnotationValue_tKey);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;ownerToWoner&quot;,ownerToWoner);&#xA;isApplicableMatch.registerObject(&quot;annotationToTAnnotation&quot;,annotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberKey/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonClassInClassFileToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsDouble/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.escapedValue&quot;, csp);&#xA;var_mValue_escapedValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tText = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tText&quot;, csp);&#xA;var_tValue_tText.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_escapedValue,var_tValue_tText);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueStringArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mNameToTName&quot;,mNameToTName);&#xA;isApplicableMatch.registerObject(&quot;mName&quot;,mName);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;tName&quot;,tName);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodSignature/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mDef&quot;,mDef);&#xA;isApplicableMatch.registerObject(&quot;tDef&quot;,tDef);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mClass&quot;,mClass);&#xA;isApplicableMatch.registerObject(&quot;mClassDeclarationToTClass&quot;,mClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;tSig&quot;,tSig);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SyntethicMethod/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_cu_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cu.originalFilePath&quot;, csp);&#xA;var_cu_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_module_location = CSPFactoryHelper.eINSTANCE.createVariable(&quot;module.location&quot;, csp);&#xA;var_module_location.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_cu_originalFilePath,var_module_location);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;m2pm&quot;,m2pm);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/CompilationUnitToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mName_mName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mName.mName&quot;, csp);&#xA;var_mName_mName.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mName_mName,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;modelToPg&quot;,modelToPg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodName/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tSignature.upperBound&quot;, csp);&#xA;var_tSignature_upperBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;UpperBound upperBound = new UpperBound();&#xA;&#xA;&#xA;csp.getConstraints().add(upperBound);&#xA;&#xA;// Solve CSP&#xA;upperBound.setRuleName(&quot;NoRuleName&quot;);&#xA;upperBound.solve(var_mType_name,var_tSignature_upperBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;isApplicableMatch.registerObject(&quot;mFieldName&quot;,mFieldName);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;eFieldDeclarationToTField&quot;,eFieldDeclarationToTField);&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldSignature/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, csp);&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, csp);&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, csp);&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerClassMember/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tMethodSignature_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.upperBound&quot;, true, csp);&#xA;var_tMethodSignature_upperBound.setValue(tMethodSignature.getUpperBound());&#xA;var_tMethodSignature_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tMethodSignature_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tMethodSignature.lowerBound&quot;, true, csp);&#xA;var_tMethodSignature_lowerBound.setValue(tMethodSignature.getLowerBound());&#xA;var_tMethodSignature_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tDefinition_upperBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.upperBound&quot;, csp);&#xA;var_tDefinition_upperBound.setType(&quot;int&quot;);&#xA;Variable var_tDefinition_lowerBound = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tDefinition.lowerBound&quot;, csp);&#xA;var_tDefinition_lowerBound.setType(&quot;int&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tDefinition_upperBound,var_tMethodSignature_upperBound);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_tDefinition_lowerBound,var_tMethodSignature_lowerBound);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MethodDefinition/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInstanceCreation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsBoolean/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mPackage.name&quot;, csp);&#xA;var_mPackage_name.setType(&quot;String&quot;);&#xA;Variable var_tPackage_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPackage.tName&quot;, csp);&#xA;var_tPackage_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mPackage_name,var_tPackage_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PackageToPGPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, csp);&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, csp);&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedInterfaceDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSource&quot;,mSource);&#xA;isApplicableMatch.registerObject(&quot;mTarget&quot;,mTarget);&#xA;isApplicableMatch.registerObject(&quot;tFlow&quot;,tFlow);&#xA;isApplicableMatch.registerObject(&quot;mFlowToTFlow&quot;,mFlowToTFlow);&#xA;isApplicableMatch.registerObject(&quot;mSourceToTSource&quot;,mSourceToTSource);&#xA;isApplicableMatch.registerObject(&quot;tSource&quot;,tSource);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/DataFlowOut/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClassToTExtendedClass&quot;,eExtendedClassToTExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eExtendedClass&quot;,eExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;tExtendedClass&quot;,tExtendedClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassExtendsClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotationArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAnonymousToTAnonymous&quot;,mAnonymousToTAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tAnonymous&quot;,tAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mDefinitionToTMember&quot;,mDefinitionToTMember);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;isApplicableMatch.registerObject(&quot;tDefinition&quot;,tDefinition);&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTSignature&quot;,mSignatureToTSignature);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/LinkDefinitionToAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnSelf/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnBodyDecl/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationType&quot;,mAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;AnnotationToTAnnotation&quot;,AnnotationToTAnnotation);&#xA;isApplicableMatch.registerObject(&quot;AnnotationTypeToTAnnotationType&quot;,AnnotationTypeToTAnnotationType);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;mAnnotation&quot;,mAnnotation);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationType&quot;,tAnnotationType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeAccessOnAnnotation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclaration&quot;,eClassDeclaration);&#xA;isApplicableMatch.registerObject(&quot;tSuperInterface&quot;,tSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterface&quot;,eSuperInterface);&#xA;isApplicableMatch.registerObject(&quot;eClassDeclarationToTClass&quot;,eClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eParameterTypeAccess&quot;,eParameterTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;eSuperInterfaceToTSuperInterface&quot;,eSuperInterfaceToTSuperInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassImplementsPatrameterizedInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mModel&quot;,mModel);&#xA;isApplicableMatch.registerObject(&quot;mModelToTypeGraph&quot;,mModelToTypeGraph);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/OrphanedClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tAbstractType&quot;,tAbstractType);&#xA;isApplicableMatch.registerObject(&quot;eType&quot;,eType);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;eTypeToTAbstractType&quot;,eTypeToTAbstractType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterizedTypeToType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/Annotation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;javaToJava&quot;,javaToJava);&#xA;isApplicableMatch.registerObject(&quot;lang&quot;,lang);&#xA;isApplicableMatch.registerObject(&quot;tPackageLang&quot;,tPackageLang);&#xA;isApplicableMatch.registerObject(&quot;objectToObject&quot;,objectToObject);&#xA;isApplicableMatch.registerObject(&quot;java&quot;,java);&#xA;isApplicableMatch.registerObject(&quot;langToLang&quot;,langToLang);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;object&quot;,object);&#xA;isApplicableMatch.registerObject(&quot;tPackageJava&quot;,tPackageJava);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeParameter/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;mParent&quot;,mParent);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;parentToParent&quot;,parentToParent);&#xA;isApplicableMatch.registerObject(&quot;mAnonymous&quot;,mAnonymous);&#xA;isApplicableMatch.registerObject(&quot;tParent&quot;,tParent);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassTypeClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;varDeclFrag&quot;,varDeclFrag);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mField&quot;,mField);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTMethod&quot;,mMethodToTMethod);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tField&quot;,tField);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FieldAccessReadWrite/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;invocation&quot;,invocation);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ArrayInitializerIgnoreExpressionsEdge/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;mCreation&quot;,mCreation);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousClassInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/SuperConstructorInvocation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tOwner&quot;,tOwner);&#xA;isApplicableMatch.registerObject(&quot;mOwnerToTOwner&quot;,mOwnerToTOwner);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/FlowNode/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypeIsFloat/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModel.name&quot;, csp);&#xA;var_mModel_name.setType(&quot;String&quot;);&#xA;Variable var_tPG_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tPG.tName&quot;, csp);&#xA;var_tPG_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModel_name,var_tPG_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ModelToPg/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mSignatureToTMethodSignature&quot;,mSignatureToTMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;tMethodSignature&quot;,tMethodSignature);&#xA;isApplicableMatch.registerObject(&quot;mSignature&quot;,mSignature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ConstructorDefinition/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.value&quot;, csp);&#xA;var_mValue_value.setType(&quot;Boolean&quot;);&#xA;Variable var_tValue_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.value&quot;, csp);&#xA;var_tValue_value.setType(&quot;Boolean&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_value,var_tValue_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueBoolean/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumInPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;defToMember&quot;,defToMember);&#xA;isApplicableMatch.registerObject(&quot;tAnnotation&quot;,tAnnotation);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;Annotation&quot;,Annotation);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/MemberInAnnotationVisibility/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;eModelToTypeGraph&quot;,eModelToTypeGraph);&#xA;isApplicableMatch.registerObject(&quot;primitives&quot;,primitives);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/PrimitiveTypesIsVoid/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterType.tName&quot;, true, csp);&#xA;var_tOuterType_tName.setValue(tOuterType.getTName());&#xA;var_tOuterType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_eNestedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.proxy&quot;, csp);&#xA;var_eNestedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tNestedType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tLib&quot;, csp);&#xA;var_tNestedType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_eNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eNestedType.name&quot;, csp);&#xA;var_eNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_eNestedType_proxy,var_tNestedType_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterType_tName,var_eNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;tOuterType&quot;,tOuterType);&#xA;isApplicableMatch.registerObject(&quot;eOuterTypeToTOuterInterface&quot;,eOuterTypeToTOuterInterface);&#xA;isApplicableMatch.registerObject(&quot;eOuterType&quot;,eOuterType);&#xA;isApplicableMatch.registerObject(&quot;tOuterPackage&quot;,tOuterPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/NestedClassInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.proxy&quot;, csp);&#xA;var_mType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, csp);&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, csp);&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_proxy,var_tType_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_mType_name,var_tType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mPackageToTPackage&quot;,mPackageToTPackage);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationTypeInPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;cu2m&quot;,cu2m);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;module&quot;,module);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypeInCompilationUnitToModule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;.initializer&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddSuffix addSuffix = new AddSuffix();&#xA;&#xA;&#xA;csp.getConstraints().add(addSuffix);&#xA;&#xA;// Solve CSP&#xA;addSuffix.setRuleName(&quot;NoRuleName&quot;);&#xA;addSuffix.solve(var_tType_tName,literal0,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPM&quot;,tPM);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTTYpe&quot;,mTypeToTTYpe);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InitializerInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tOuterClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tOuterClass.tName&quot;, true, csp);&#xA;var_tOuterClass_tName.setValue(tOuterClass.getTName());&#xA;var_tOuterClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mInnerClass_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.proxy&quot;, csp);&#xA;var_mInnerClass_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tInnerClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tLib&quot;, csp);&#xA;var_tInnerClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mInnerClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mInnerClass.name&quot;, csp);&#xA;var_mInnerClass_name.setType(&quot;String&quot;);&#xA;Variable var_tInnerClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tInnerClass.tName&quot;, csp);&#xA;var_tInnerClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mInnerClass_proxy,var_tInnerClass_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tOuterClass_tName,var_mInnerClass_name,var_tInnerClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;typeGraph&quot;,typeGraph);&#xA;isApplicableMatch.registerObject(&quot;eOuterClass&quot;,eOuterClass);&#xA;isApplicableMatch.registerObject(&quot;mDefinition&quot;,mDefinition);&#xA;isApplicableMatch.registerObject(&quot;tOuterClass&quot;,tOuterClass);&#xA;isApplicableMatch.registerObject(&quot;eOuterClassToTOuterClass&quot;,eOuterClassToTOuterClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ClassInnerAnonClassMember/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mValue_tokenValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mValue.tokenValue&quot;, csp);&#xA;var_mValue_tokenValue.setType(&quot;String&quot;);&#xA;Variable var_tValue_tNumber = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tValue.tNumber&quot;, csp);&#xA;var_tValue_tNumber.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mValue_tokenValue,var_tValue_tNumber);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mArray&quot;,mArray);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueNumberArray/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_unresolvedType_proxy = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.proxy&quot;, csp);&#xA;var_unresolvedType_proxy.setType(&quot;Boolean&quot;);&#xA;Variable var_tClass_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tLib&quot;, csp);&#xA;var_tClass_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_unresolvedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;unresolvedType.name&quot;, csp);&#xA;var_unresolvedType_name.setType(&quot;String&quot;);&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, csp);&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_unresolvedType_proxy,var_tClass_tLib);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_unresolvedType_name,var_tClass_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tModule&quot;,tModule);&#xA;isApplicableMatch.registerObject(&quot;eModelToPg&quot;,eModelToPg);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eModel&quot;,eModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/UnresolvedClassDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tParam&quot;,tParam);&#xA;isApplicableMatch.registerObject(&quot;tSignature&quot;,tSignature);&#xA;isApplicableMatch.registerObject(&quot;mMethodToTDef&quot;,mMethodToTDef);&#xA;isApplicableMatch.registerObject(&quot;tAnnotable&quot;,tAnnotable);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;astNode&quot;,astNode);&#xA;isApplicableMatch.registerObject(&quot;aSTNodeToTAnnotable&quot;,aSTNodeToTAnnotable);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/ParameterAnnotation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;mAnnotationValue&quot;,mAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;AnnotationMemberValuePairToTAnnotationValue&quot;,AnnotationMemberValuePairToTAnnotationValue);&#xA;isApplicableMatch.registerObject(&quot;mOwner&quot;,mOwner);&#xA;isApplicableMatch.registerObject(&quot;tAnnotationValue&quot;,tAnnotationValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnnotationMemberValueAnnotation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tType_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tLib&quot;, true, csp);&#xA;var_tType_tLib.setValue(tType.isTLib());&#xA;var_tType_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_tType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tType.tName&quot;, true, csp);&#xA;var_tType_tName.setValue(tType.getTName());&#xA;var_tType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tAnonymous_tLib = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tLib&quot;, csp);&#xA;var_tAnonymous_tLib.setType(&quot;Boolean&quot;);&#xA;Variable var_mAnonymous_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mAnonymous.index&quot;, csp);&#xA;var_mAnonymous_index.setType(&quot;int&quot;);&#xA;Variable var_tAnonymous_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tAnonymous.tName&quot;, csp);&#xA;var_tAnonymous_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_tType_tLib,var_tAnonymous_tLib);&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tType_tName,var_mAnonymous_index,var_tAnonymous_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mMemberToTMember&quot;,mMemberToTMember);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;tMember&quot;,tMember);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/AnonymousEnumConstant/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mDefinition_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mDefinition.name&quot;, csp);&#xA;var_mDefinition_name.setType(&quot;String&quot;);&#xA;Variable var_tName_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tName.tName&quot;, csp);&#xA;var_tName_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mDefinition_name,var_tName_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tEnum&quot;,tEnum);&#xA;isApplicableMatch.registerObject(&quot;mEnum&quot;,mEnum);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;mEnumToTEnum&quot;,mEnumToTEnum);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/EnumConstant/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mModifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.static&quot;, csp);&#xA;var_mModifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_tModifier_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.isStatic&quot;, csp);&#xA;var_tModifier_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_mModifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mModifier.visibility&quot;, csp);&#xA;var_mModifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_tModifier_tVisibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tModifier.tVisibility&quot;, csp);&#xA;var_tModifier_tVisibility.setType(&quot;basic.TVisibility&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;DefaultVisibility defaultVisibility = new DefaultVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(defaultVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mModifier_static,var_tModifier_isStatic);&#xA;defaultVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;defaultVisibility.solve(var_mModifier_visibility,var_tModifier_tVisibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mTypeToTType&quot;,mTypeToTType);&#xA;isApplicableMatch.registerObject(&quot;tType&quot;,tType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/TypesVisibility/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;$&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_tClass_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tClass.tName&quot;, true, csp);&#xA;var_tClass_tName.setValue(tClass.getTName());&#xA;var_tClass_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mNestedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mNestedType.name&quot;, csp);&#xA;var_mNestedType_name.setType(&quot;String&quot;);&#xA;Variable var_tNestedType_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tNestedType.tName&quot;, csp);&#xA;var_tNestedType_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Concat concat = new Concat();&#xA;&#xA;&#xA;csp.getConstraints().add(concat);&#xA;&#xA;// Solve CSP&#xA;concat.setRuleName(&quot;NoRuleName&quot;);&#xA;concat.solve(literal0,var_tClass_tName,var_mNestedType_name,var_tNestedType_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tClass&quot;,tClass);&#xA;isApplicableMatch.registerObject(&quot;tPackage&quot;,tPackage);&#xA;isApplicableMatch.registerObject(&quot;pg&quot;,pg);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclarationToTClass&quot;,eAnonymousClassDeclarationToTClass);&#xA;isApplicableMatch.registerObject(&quot;eAnonymousClassDeclaration&quot;,eAnonymousClassDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.pm/model/Pm.ecore#//Rules/InterfaceInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
