#using org.gravity.tgg.modisco.pm.*
#using AttrCondDefLibrary.*

#abstract #rule AnonymousClass
#with org.gravity.tgg.modisco.pm

#source {
	mMember:MDefinition {
		-mMethodInvocations -> mCreation
	}

	mCreation:MClassInstanceCreation {
		++-anonymousClassDeclaration -> mAnonymous
	}

	++mAnonymous:MAnonymousClass
}

#target {
	tPackage:TPackage {
		++-classes -> tAnonymous
		++-allTypes -> tAnonymous
		-model -> pg
	}

	tType:TAbstractType {
		-package -> tPackage
		-defines -> tMember
		++-innerTypes -> tAnonymous
	}

	tMember:TMember

	++tAnonymous:TClass

	pg:TypeGraph {
		++  -classes -> tAnonymous
		++  -allTypes -> tAnonymous
	}
}

#correspondence {
	mMemberToTMember :MDefinitionToTMember {
		#src->mMember
		#trg->tMember
	}

	++ eAnonymousClassDeclarationToTClass :AnonymousClassDeclarationToTClass {
		#src->mAnonymous
		#trg->tAnonymous
	}
}

#attributeConditions {
	concat("$", tType.tName, mAnonymous.index, tAnonymous.tName)

	eq(tType.tLib, tAnonymous.tLib)
}


#using org.gravity.tgg.modisco.pm.*
#using AttrCondDefLibrary.*

#rule AnonymousClassInType #extends AnonymousClass #with org.gravity.tgg.modisco.pm

#source {
	mType:AbstractTypeDeclaration {
		-bodyDeclarations -> mMember
	}

	mMember:MDefinition
}

#target {
	++tAnonymous:TClass

	tType:TAbstractType
}

#correspondence {
	mTypeToTType :TypeToTAbstractType {
		#src->mType
		#trg->tType
	}
}


#using org.gravity.tgg.modisco.pm.*
#using AttrCondDefLibrary.*

#rule AnonymousClassInAnonymous #extends AnonymousClass #with org.gravity.tgg.modisco.pm

#source {
	mType:AnonymousClassDeclaration {
		-bodyDeclarations -> mMember
	}

	mMember:MDefinition
}

#target {
	++tAnonymous:TClass

	tType:TClass
}

#correspondence {
	mTypeToTType :AnonymousClassDeclarationToTClass {
		#src->mType
		#trg->tType
	}
}


#using org.gravity.tgg.modisco.pm.*
#using AttrCondDefLibrary.*

#rule AnonymousEnumConstant #with org.gravity.tgg.modisco.pm

#source {
	mMember:MEnumConstantDeclaration {
		++-anonymousClassDeclaration -> mAnonymous
	}

	++mAnonymous:MAnonymousClass
}

#target {
	tPackage:TPackage {
		++-classes -> tAnonymous
		++-allTypes -> tAnonymous
		-model -> pg
	}

	tType:TClass {
		-package -> tPackage
		-defines -> tMember
		++-innerTypes -> tAnonymous
	}

	tMember:TMember

	++tAnonymous:TClass {
		++-parentClasses->tType
	}

	pg:TypeGraph {
		++  -classes -> tAnonymous
		++  -allTypes -> tAnonymous
	}
}

#correspondence {
	mMemberToTMember :MDefinitionToTMember {
		#src->mMember
		#trg->tMember
	}

	++ eAnonymousClassDeclarationToTClass :AnonymousClassDeclarationToTClass {
		#src->mAnonymous
		#trg->tAnonymous
	}
}

#attributeConditions {
	concat("$", tType.tName, mAnonymous.index, tAnonymous.tName)

	eq(tType.tLib, tAnonymous.tLib)
}


