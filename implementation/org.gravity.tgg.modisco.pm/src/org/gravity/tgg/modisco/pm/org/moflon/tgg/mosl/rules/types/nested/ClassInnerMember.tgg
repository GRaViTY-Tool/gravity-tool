#using org.gravity.tgg.modisco.pm.*
#using AttrCondDefLibrary.*

#abstract #rule ClassInnerMember
#with org.gravity.tgg.modisco.pm

#source {
	mDefinition:MAbstractMethodDefinition {
		++ -mInnerTypes -> mInnerClass
	}

	++mInnerClass:MClass
}

#target {
	typeGraph:TypeGraph {
		++  -allTypes -> tInnerClass
		++  -classes -> tInnerClass
	}
	
	tPackage:TPackage {
		++-allTypes->tInnerClass
		++-classes->tInnerClass
	}

	tOuterClass:TAbstractType {
		-model->typeGraph
		-package->tPackage
		++ -innerTypes -> tInnerClass
	}

	++tInnerClass:TClass
}

#correspondence {
	++tInnerTypeToTInnerAbstractType :TypeToTAbstractType {
		#src->mInnerClass
		#trg->tInnerClass
	}
	++astNodeToAnnotatable :ASTNodeToTAnnotatable {
		#src->mInnerClass
		#trg->tInnerClass
	}
}

#attributeConditions {
	eq(mInnerClass.proxy, tInnerClass.tLib)
	concat("$", tOuterClass.tName, mInnerClass.name, tInnerClass.tName)
}

#using org.gravity.tgg.modisco.pm.*

#rule ClassInnerClassMember #extends ClassInnerMember
#with org.gravity.tgg.modisco.pm

#source {
	eOuterClass:ClassDeclaration {
		-bodyDeclarations -> mDefinition
	}

	mDefinition:MAbstractMethodDefinition
}

#target {
	tOuterClass:TClass
}

#correspondence {
	eOuterClassToTOuterClass :TypeToTAbstractType {
		#src->eOuterClass
		#trg->tOuterClass
	}
}

#using org.gravity.tgg.modisco.pm.*

#rule ClassInnerAnonClassMember #extends ClassInnerMember
#with org.gravity.tgg.modisco.pm

#source {
	eOuterClass:AnonymousClassDeclaration {
		-bodyDeclarations -> mDefinition
	}

	mDefinition:MAbstractMethodDefinition
}

#target {
	tOuterClass:TClass
}

#correspondence {
	eOuterClassToTOuterClass :AnonymousClassDeclarationToTClass {
		#src->eOuterClass
		#trg->tOuterClass
	}
}


