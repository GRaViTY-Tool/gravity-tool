<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.pm.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.pm.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, true, csp);&#xA;var_model_name.setValue(model.getName());&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, csp);&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;model2PM&quot;, model2PM);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;model&quot;).eClass()).equals(&quot;uml.Model.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, true, csp);&#xA;var_pm_tName.setValue(pm.getTName());&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, csp);&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;model2PM&quot;, model2PM);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pm&quot;).eClass()).equals(&quot;basic.TypeGraph.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;outerModel&quot;, outerModel);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, true, csp);&#xA;var_model_name.setValue(model.getName());&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, csp);&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;outerModel&quot;,outerModel);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;outerModel2PM&quot;,outerModel2PM);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;outerModel&quot;, outerModel);&#xA;ruleresult.registerObject(&quot;model2PM&quot;, model2PM);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;outerModel2PM&quot;, outerModel2PM);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;model&quot;).eClass()).equals(&quot;uml.Model.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, true, csp);&#xA;var_pm_tName.setValue(pm.getTName());&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, csp);&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;isApplicableMatch.registerObject(&quot;outerModel&quot;,outerModel);&#xA;isApplicableMatch.registerObject(&quot;outerModel2PM&quot;,outerModel2PM);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;outerModel&quot;, outerModel);&#xA;ruleresult.registerObject(&quot;model2PM&quot;, model2PM);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;outerModel2PM&quot;, outerModel2PM);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pm&quot;).eClass()).equals(&quot;basic.TypeGraph.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Model2TypeGraph&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model&quot;, true, csp);&#xA;var_model_name.setValue(__helper.getValue(&quot;model&quot;, &quot;name&quot;));&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm&quot;, true, csp);&#xA;var_pm_tName.setValue(__helper.getValue(&quot;pm&quot;, &quot;tName&quot;));&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Model2TypeGraph&quot;);&#xA;eq0.solve(var_model_name,var_pm_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_pm_tName.setBound(false);&#xA;&#x9;eq0.solve(var_model_name,var_pm_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;pm&quot;, &quot;tName&quot;, var_pm_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Model2TypeGraph&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model&quot;, true, csp);&#xA;var_model_name.setValue(__helper.getValue(&quot;model&quot;, &quot;name&quot;));&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm&quot;, true, csp);&#xA;var_pm_tName.setValue(__helper.getValue(&quot;pm&quot;, &quot;tName&quot;));&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Model2TypeGraph&quot;);&#xA;eq0.solve(var_model_name,var_pm_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_model_name.setBound(false);&#xA;&#x9;eq0.solve(var_model_name,var_pm_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;model&quot;, &quot;name&quot;, var_model_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ModelNested2TypeGraph&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model&quot;, true, csp);&#xA;var_model_name.setValue(__helper.getValue(&quot;model&quot;, &quot;name&quot;));&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm&quot;, true, csp);&#xA;var_pm_tName.setValue(__helper.getValue(&quot;pm&quot;, &quot;tName&quot;));&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelNested2TypeGraph&quot;);&#xA;eq0.solve(var_model_name,var_pm_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_pm_tName.setBound(false);&#xA;&#x9;eq0.solve(var_model_name,var_pm_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;pm&quot;, &quot;tName&quot;, var_pm_tName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ModelNested2TypeGraph&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model&quot;, true, csp);&#xA;var_model_name.setValue(__helper.getValue(&quot;model&quot;, &quot;name&quot;));&#xA;var_model_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm&quot;, true, csp);&#xA;var_pm_tName.setValue(__helper.getValue(&quot;pm&quot;, &quot;tName&quot;));&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ModelNested2TypeGraph&quot;);&#xA;eq0.solve(var_model_name,var_pm_tName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_model_name.setBound(false);&#xA;&#x9;eq0.solve(var_model_name,var_pm_tName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;model&quot;, &quot;name&quot;, var_model_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, true, csp);&#xA;var_model_name.setValue(model.getName());&#xA;var_model_name.setType(&quot;String&quot;);&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, true, csp);&#xA;var_pm_tName.setValue(pm.getTName());&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, true, csp);&#xA;var_model_name.setValue(model.getName());&#xA;var_model_name.setType(&quot;String&quot;);&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, true, csp);&#xA;var_pm_tName.setValue(pm.getTName());&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, csp);&#xA;var_model_name.setType(&quot;String&quot;);&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, csp);&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/Model2TypeGraph/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_model_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;model.name&quot;, csp);&#xA;var_model_name.setType(&quot;String&quot;);&#xA;Variable var_pm_tName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pm.tName&quot;, csp);&#xA;var_pm_tName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_model_name,var_pm_tName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;outerModel&quot;,outerModel);&#xA;isApplicableMatch.registerObject(&quot;outerModel2PM&quot;,outerModel2PM);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.pm.uml/model/Uml.ecore#//Rules/ModelNested2TypeGraph/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
