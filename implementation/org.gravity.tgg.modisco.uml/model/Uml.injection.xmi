<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.tgg.modisco.uml.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Enumeration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeDouble.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jPackage&quot;, jPackage);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uPackage&quot;, uPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mAnon&quot;, mAnon);&#xA;match.registerObject(&quot;jType&quot;, jType);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mAnon&quot;,mAnon);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnon&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uType&quot;, uType);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;classDec&quot;, classDec);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;t2t&quot;,t2t);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;t2t&quot;, t2t);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uPackage&quot;, uPackage);&#xA;match.registerObject(&quot;uType&quot;, uType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;t2t&quot;,t2t);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;t2t&quot;, t2t);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;match.registerObject(&quot;classDec&quot;, classDec);&#xA;match.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;childInterface&quot;,childInterface);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;typeAcc&quot;,typeAcc);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;childInterface&quot;, childInterface);&#xA;ruleresult.registerObject(&quot;interfaceGeneralization&quot;, interfaceGeneralization);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;superInterface&quot;, superInterface);&#xA;ruleresult.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAcc&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;childInterface&quot;, childInterface);&#xA;match.registerObject(&quot;interfaceGeneralization&quot;, interfaceGeneralization);&#xA;match.registerObject(&quot;superInterface&quot;, superInterface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;childInterface&quot;,childInterface);&#xA;isApplicableMatch.registerObject(&quot;interfaceGeneralization&quot;,interfaceGeneralization);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;childInterface&quot;, childInterface);&#xA;ruleresult.registerObject(&quot;interfaceGeneralization&quot;, interfaceGeneralization);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;superInterface&quot;, superInterface);&#xA;ruleresult.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;interfaceGeneralization&quot;).eClass()).equals(&quot;uml.Generalization.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;create&quot;, create);&#xA;match.registerObject(&quot;array&quot;, array);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;create&quot;,create);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;create&quot;, create);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;value&quot;, value);&#xA;match.registerObject(&quot;array&quot;, array);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value.name&quot;, true, csp);&#xA;var_value_name.setValue(value.getName());&#xA;var_value_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag.body&quot;, csp);&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_value_name,var_tag_body);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;tag&quot;, tag);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;value&quot;).eClass()).equals(&quot;java.AnnotationMemberValuePair.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;array&quot;).eClass()).equals(&quot;java.ArrayInitializer.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;comment&quot;, comment);&#xA;match.registerObject(&quot;tag&quot;, tag);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag.body&quot;, true, csp);&#xA;var_tag_body.setValue(tag.getBody());&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value.name&quot;, csp);&#xA;var_value_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_value_name,var_tag_body);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;tag&quot;,tag);&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;tag&quot;, tag);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;tag&quot;).eClass()).equals(&quot;uml.Comment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mPackage&quot;, mPackage);&#xA;match.registerObject(&quot;mTrgType&quot;, mTrgType);&#xA;match.registerObject(&quot;mSrcType&quot;, mSrcType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uTrgType&quot;,uTrgType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;mTrgType&quot;,mTrgType);&#xA;isApplicableMatch.registerObject(&quot;trg2Trg&quot;,trg2Trg);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mSrcType&quot;,mSrcType);&#xA;isApplicableMatch.registerObject(&quot;src2Src&quot;,src2Src);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;uSrcType&quot;,uSrcType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;uTrgType&quot;, uTrgType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;mTrgType&quot;, mTrgType);&#xA;ruleresult.registerObject(&quot;trg2Trg&quot;, trg2Trg);&#xA;ruleresult.registerObject(&quot;uUsage&quot;, uUsage);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;mSrcType&quot;, mSrcType);&#xA;ruleresult.registerObject(&quot;src2Src&quot;, src2Src);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;uSrcType&quot;, uSrcType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uTrgType&quot;, uTrgType);&#xA;match.registerObject(&quot;uUsage&quot;, uUsage);&#xA;match.registerObject(&quot;uPackage&quot;, uPackage);&#xA;match.registerObject(&quot;uSrcType&quot;, uSrcType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uTrgType&quot;,uTrgType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;mTrgType&quot;,mTrgType);&#xA;isApplicableMatch.registerObject(&quot;trg2Trg&quot;,trg2Trg);&#xA;isApplicableMatch.registerObject(&quot;uUsage&quot;,uUsage);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mSrcType&quot;,mSrcType);&#xA;isApplicableMatch.registerObject(&quot;src2Src&quot;,src2Src);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;uSrcType&quot;,uSrcType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;uTrgType&quot;, uTrgType);&#xA;ruleresult.registerObject(&quot;mPackage&quot;, mPackage);&#xA;ruleresult.registerObject(&quot;mTrgType&quot;, mTrgType);&#xA;ruleresult.registerObject(&quot;trg2Trg&quot;, trg2Trg);&#xA;ruleresult.registerObject(&quot;uUsage&quot;, uUsage);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;mSrcType&quot;, mSrcType);&#xA;ruleresult.registerObject(&quot;src2Src&quot;, src2Src);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;uSrcType&quot;, uSrcType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uUsage&quot;).eClass()).equals(&quot;uml.Usage.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeShort.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;classDec&quot;, classDec);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;modifier&quot;, modifier);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MConstructorDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;comment&quot;, comment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Operation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;comment&quot;).eClass()).equals(&quot;uml.Comment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;match.registerObject(&quot;mAnon&quot;, mAnon);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mConstructor&quot;,mConstructor);&#xA;isApplicableMatch.registerObject(&quot;mAnon&quot;,mAnon);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mConstructor&quot;).eClass()).equals(&quot;modisco.MClassInstanceCreation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnon&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MClass.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mowner&quot;, mowner);&#xA;match.registerObject(&quot;mparam&quot;, mparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;mparam&quot;,mparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mparam&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uowner&quot;, uowner);&#xA;match.registerObject(&quot;uparam&quot;, uparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;uparam&quot;,uparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uparam&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mowner&quot;, mowner);&#xA;match.registerObject(&quot;mmethod&quot;, mmethod);&#xA;match.registerObject(&quot;mparam&quot;, mparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;mparam&quot;,mparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;mmethod&quot;, mmethod);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mparam&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uowner&quot;, uowner);&#xA;match.registerObject(&quot;uparam&quot;, uparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;uparam&quot;,uparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;mmethod&quot;, mmethod);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uparam&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeVoid.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MConstructorDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;comment&quot;, comment);&#xA;match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;comment&quot;).eClass()).equals(&quot;uml.Comment.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Operation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MMethodDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Operation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;superClassDec&quot;, superClassDec);&#xA;match.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;match.registerObject(&quot;classDec&quot;, classDec);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;superClassDec&quot;,superClassDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;typeAcc&quot;,typeAcc);&#xA;isApplicableMatch.registerObject(&quot;umlClassifier&quot;,umlClassifier);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;superClass&quot;,superClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;superClassDec&quot;, superClassDec);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;umlClassifier&quot;, umlClassifier);&#xA;ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;generalization&quot;, generalization);&#xA;ruleresult.registerObject(&quot;superClass&quot;, superClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAcc&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlClassifier&quot;, umlClassifier);&#xA;match.registerObject(&quot;generalization&quot;, generalization);&#xA;match.registerObject(&quot;superClass&quot;, superClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;superClassDec&quot;,superClassDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;umlClassifier&quot;,umlClassifier);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;generalization&quot;,generalization);&#xA;isApplicableMatch.registerObject(&quot;superClass&quot;,superClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;superClassDec&quot;, superClassDec);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;umlClassifier&quot;, umlClassifier);&#xA;ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;generalization&quot;, generalization);&#xA;ruleresult.registerObject(&quot;superClass&quot;, superClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;generalization&quot;).eClass()).equals(&quot;uml.Generalization.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.AnnotationTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;method&quot;, method);&#xA;match.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;match.registerObject(&quot;jType&quot;, jType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam.direction&quot;, csp);&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create constraints&#xA;IsReturn isReturn = new IsReturn();&#xA;&#xA;&#xA;csp.getConstraints().add(isReturn);&#xA;&#xA;// Solve CSP&#xA;isReturn.setRuleName(&quot;NoRuleName&quot;);&#xA;isReturn.solve(var_returnParam_direction);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;typeAccess&quot;,typeAccess);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;m2o&quot;,m2o);&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;ta2p&quot;, ta2p);&#xA;ruleresult.registerObject(&quot;returnParam&quot;, returnParam);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;m2o&quot;, m2o);&#xA;ruleresult.registerObject(&quot;operation&quot;, operation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam.direction&quot;, true, csp);&#xA;var_returnParam_direction.setValue(returnParam.getDirection());&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;IsReturn isReturn = new IsReturn();&#xA;&#xA;&#xA;csp.getConstraints().add(isReturn);&#xA;&#xA;// Solve CSP&#xA;isReturn.setRuleName(&quot;NoRuleName&quot;);&#xA;isReturn.solve(var_returnParam_direction);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;returnParam&quot;, returnParam);&#xA;match.registerObject(&quot;uType&quot;, uType);&#xA;match.registerObject(&quot;operation&quot;, operation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;returnParam&quot;,returnParam);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;m2o&quot;,m2o);&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;ta2p&quot;, ta2p);&#xA;ruleresult.registerObject(&quot;returnParam&quot;, returnParam);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;m2o&quot;, m2o);&#xA;ruleresult.registerObject(&quot;operation&quot;, operation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;returnParam&quot;).eClass()).equals(&quot;uml.Parameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;access&quot;, access);&#xA;match.registerObject(&quot;variable&quot;, variable);&#xA;match.registerObject(&quot;type&quot;, type);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, csp);&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;access&quot;,access);&#xA;isApplicableMatch.registerObject(&quot;v2p&quot;,v2p);&#xA;isApplicableMatch.registerObject(&quot;variable&quot;,variable);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;v2p&quot;, v2p);&#xA;ruleresult.registerObject(&quot;variable&quot;, variable);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;interf&quot;, interf);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;type2Interface&quot;, type2Interface);&#xA;ruleresult.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;annotation&quot;).eClass()).equals(&quot;java.Annotation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;access&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;comment&quot;, comment);&#xA;match.registerObject(&quot;interf&quot;, interf);&#xA;match.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, true, csp);&#xA;var_comment_body.setValue(comment.getBody());&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;v2p&quot;,v2p);&#xA;isApplicableMatch.registerObject(&quot;variable&quot;,variable);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;v2p&quot;, v2p);&#xA;ruleresult.registerObject(&quot;variable&quot;, variable);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;interf&quot;, interf);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;type2Interface&quot;, type2Interface);&#xA;ruleresult.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;comment&quot;).eClass()).equals(&quot;uml.Comment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;classDec&quot;, classDec);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.InterfaceDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;javaModel&quot;, javaModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel.name&quot;, true, csp);&#xA;var_javaModel_name.setValue(javaModel.getName());&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel.name&quot;, csp);&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_javaModel_name,var_umlModel_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;javaModel&quot;,javaModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootModel&quot;, rootModel);&#xA;ruleresult.registerObject(&quot;umlModel&quot;, umlModel);&#xA;ruleresult.registerObject(&quot;commonTypes&quot;, commonTypes);&#xA;ruleresult.registerObject(&quot;javaModel&quot;, javaModel);&#xA;ruleresult.registerObject(&quot;jm2um2&quot;, jm2um2);&#xA;ruleresult.registerObject(&quot;jm2um3&quot;, jm2um3);&#xA;ruleresult.registerObject(&quot;jm2commonTypes&quot;, jm2commonTypes);&#xA;ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;sourceRefModel&quot;, sourceRefModel);&#xA;ruleresult.registerObject(&quot;externalModel&quot;, externalModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;javaModel&quot;).eClass()).equals(&quot;modisco.MGravityModel.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;rootModel&quot;, rootModel);&#xA;match.registerObject(&quot;umlModel&quot;, umlModel);&#xA;match.registerObject(&quot;commonTypes&quot;, commonTypes);&#xA;match.registerObject(&quot;sourceRefModel&quot;, sourceRefModel);&#xA;match.registerObject(&quot;externalModel&quot;, externalModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel.name&quot;, true, csp);&#xA;var_umlModel_name.setValue(umlModel.getName());&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel.name&quot;, csp);&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_javaModel_name,var_umlModel_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;rootModel&quot;,rootModel);&#xA;isApplicableMatch.registerObject(&quot;umlModel&quot;,umlModel);&#xA;isApplicableMatch.registerObject(&quot;commonTypes&quot;,commonTypes);&#xA;isApplicableMatch.registerObject(&quot;sourceRefModel&quot;,sourceRefModel);&#xA;isApplicableMatch.registerObject(&quot;externalModel&quot;,externalModel);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;rootModel&quot;, rootModel);&#xA;ruleresult.registerObject(&quot;umlModel&quot;, umlModel);&#xA;ruleresult.registerObject(&quot;commonTypes&quot;, commonTypes);&#xA;ruleresult.registerObject(&quot;javaModel&quot;, javaModel);&#xA;ruleresult.registerObject(&quot;jm2um2&quot;, jm2um2);&#xA;ruleresult.registerObject(&quot;jm2um3&quot;, jm2um3);&#xA;ruleresult.registerObject(&quot;jm2commonTypes&quot;, jm2commonTypes);&#xA;ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;sourceRefModel&quot;, sourceRefModel);&#xA;ruleresult.registerObject(&quot;externalModel&quot;, externalModel);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;rootModel&quot;).eClass()).equals(&quot;uml.Model.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umlModel&quot;).eClass()).equals(&quot;uml.Model.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;commonTypes&quot;).eClass()).equals(&quot;uml.Package.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;sourceRefModel&quot;).eClass()).equals(&quot;uml.Model.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;externalModel&quot;).eClass()).equals(&quot;uml.Model.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;java.EnumDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Enumeration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeBoolean.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;array&quot;, array);&#xA;match.registerObject(&quot;value&quot;, value);&#xA;match.registerObject(&quot;expr&quot;, expr);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr.escapedValue&quot;, true, csp);&#xA;var_expr_escapedValue.setValue(expr.getEscapedValue());&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry.body&quot;, csp);&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_entry_body,var_expr_escapedValue);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tag&quot;,tag);&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xA;isApplicableMatch.registerObject(&quot;expr&quot;,expr);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tag&quot;, tag);&#xA;ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;e2e&quot;, e2e);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;expr&quot;, expr);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;entry&quot;, entry);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;expr&quot;).eClass()).equals(&quot;java.StringLiteral.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tag&quot;, tag);&#xA;match.registerObject(&quot;comment&quot;, comment);&#xA;match.registerObject(&quot;entry&quot;, entry);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry.body&quot;, true, csp);&#xA;var_entry_body.setValue(entry.getBody());&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr.escapedValue&quot;, csp);&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_entry_body,var_expr_escapedValue);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tag&quot;,tag);&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;entry&quot;,entry);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;tag&quot;, tag);&#xA;ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;array&quot;, array);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;e2e&quot;, e2e);&#xA;ruleresult.registerObject(&quot;value&quot;, value);&#xA;ruleresult.registerObject(&quot;expr&quot;, expr);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;entry&quot;, entry);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;entry&quot;).eClass()).equals(&quot;uml.Comment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;match.registerObject(&quot;pt&quot;, pt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pt&quot;,pt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;pt&quot;, pt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;modifier&quot;, modifier);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, true, csp);&#xA;var_vdf_name.setValue(vdf.getName());&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;modifier&quot;,modifier);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;vdf&quot;,vdf);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;modifier&quot;).eClass()).equals(&quot;java.Modifier.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MFieldDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;vdf&quot;).eClass()).equals(&quot;java.VariableDeclarationFragment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, csp);&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;m2f&quot;, m2f);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;modifier&quot;, modifier);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Property.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeByte.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jp&quot;, jp);&#xA;match.registerObject(&quot;jm&quot;, jm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm.name&quot;, true, csp);&#xA;var_jm_name.setValue(jm.getName());&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um.name&quot;, true, csp);&#xA;var_um_name.setValue(um.getName());&#xA;var_um_name.setType(&quot;String&quot;);&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, true, csp);&#xA;var_jp_name.setValue(jp.getName());&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, csp);&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jm_name,var_um_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jp&quot;,jp);&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jp&quot;, jp);&#xA;ruleresult.registerObject(&quot;jm&quot;, jm);&#xA;ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;up&quot;, up);&#xA;ruleresult.registerObject(&quot;um&quot;, um);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jp&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;up&quot;, up);&#xA;match.registerObject(&quot;um&quot;, um);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm.name&quot;, true, csp);&#xA;var_jm_name.setValue(jm.getName());&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um.name&quot;, true, csp);&#xA;var_um_name.setValue(um.getName());&#xA;var_um_name.setType(&quot;String&quot;);&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, true, csp);&#xA;var_up_name.setValue(up.getName());&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, csp);&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jm_name,var_um_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;up&quot;,up);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jp&quot;, jp);&#xA;ruleresult.registerObject(&quot;jm&quot;, jm);&#xA;ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;up&quot;, up);&#xA;ruleresult.registerObject(&quot;um&quot;, um);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;up&quot;).eClass()).equals(&quot;uml.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;owner&quot;, owner);&#xA;match.registerObject(&quot;method&quot;, method);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mowner&quot;, mowner);&#xA;match.registerObject(&quot;mmethod&quot;, mmethod);&#xA;match.registerObject(&quot;mparam&quot;, mparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;mparam&quot;,mparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;mmethod&quot;, mmethod);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mparam&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uowner&quot;, uowner);&#xA;match.registerObject(&quot;uparam&quot;, uparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;uparam&quot;,uparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;mmethod&quot;, mmethod);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uparam&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeLong.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeInt.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, true, csp);&#xA;var_vdf_name.setValue(vdf.getName());&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;vdf&quot;,vdf);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MFieldDefinition.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;vdf&quot;).eClass()).equals(&quot;java.VariableDeclarationFragment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, csp);&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;vdf&quot;, vdf);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Property.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jPackage&quot;, jPackage);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jPackage&quot;, jPackage);&#xA;match.registerObject(&quot;mAnon&quot;, mAnon);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;mAnon&quot;,mAnon);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnon&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uPackage&quot;, uPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;uPackage&quot;, uPackage);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;match.registerObject(&quot;arrayType&quot;, arrayType);&#xA;match.registerObject(&quot;jType&quot;, jType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;typeAccess&quot;,typeAccess);&#xA;isApplicableMatch.registerObject(&quot;ne2ne1&quot;,ne2ne1);&#xA;isApplicableMatch.registerObject(&quot;arrayType&quot;,arrayType);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;ruleresult.registerObject(&quot;ne2ne2&quot;, ne2ne2);&#xA;ruleresult.registerObject(&quot;ne2ne1&quot;, ne2ne1);&#xA;ruleresult.registerObject(&quot;arrayType&quot;, arrayType);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;arrayType&quot;).eClass()).equals(&quot;java.ArrayType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uType&quot;, uType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;match.registerObject(&quot;mAnon&quot;, mAnon);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mConstructor&quot;,mConstructor);&#xA;isApplicableMatch.registerObject(&quot;mAnon&quot;,mAnon);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mConstructor&quot;).eClass()).equals(&quot;modisco.MClassInstanceCreation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnon&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jPackage&quot;, jPackage);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jPackage&quot;, jPackage);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jp&quot;, jp);&#xA;match.registerObject(&quot;jParent&quot;, jParent);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, true, csp);&#xA;var_jp_name.setValue(jp.getName());&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, csp);&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uParent&quot;,uParent);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;jp&quot;,jp);&#xA;isApplicableMatch.registerObject(&quot;jParent&quot;,jParent);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;up&quot;, up);&#xA;ruleresult.registerObject(&quot;uParent&quot;, uParent);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;jp&quot;, jp);&#xA;ruleresult.registerObject(&quot;jParent&quot;, jParent);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jp&quot;).eClass()).equals(&quot;java.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;up&quot;, up);&#xA;match.registerObject(&quot;uParent&quot;, uParent);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, true, csp);&#xA;var_up_name.setValue(up.getName());&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, csp);&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;up&quot;,up);&#xA;isApplicableMatch.registerObject(&quot;uParent&quot;,uParent);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;jParent&quot;,jParent);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;up&quot;, up);&#xA;ruleresult.registerObject(&quot;uParent&quot;, uParent);&#xA;ruleresult.registerObject(&quot;p2p&quot;, p2p);&#xA;ruleresult.registerObject(&quot;jp&quot;, jp);&#xA;ruleresult.registerObject(&quot;jParent&quot;, jParent);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;up&quot;).eClass()).equals(&quot;uml.Package.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;annotation&quot;, annotation);&#xA;match.registerObject(&quot;access&quot;, access);&#xA;match.registerObject(&quot;body&quot;, body);&#xA;match.registerObject(&quot;type&quot;, type);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, csp);&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;access&quot;,access);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;body&quot;,body);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;interf&quot;, interf);&#xA;ruleresult.registerObject(&quot;body&quot;, body);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;type2Interface&quot;, type2Interface);&#xA;ruleresult.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;annotation&quot;).eClass()).equals(&quot;java.Annotation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;access&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;comment&quot;, comment);&#xA;match.registerObject(&quot;interf&quot;, interf);&#xA;match.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, true, csp);&#xA;var_comment_body.setValue(comment.getBody());&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;body&quot;,body);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;annotation&quot;, annotation);&#xA;ruleresult.registerObject(&quot;a2c&quot;, a2c);&#xA;ruleresult.registerObject(&quot;access&quot;, access);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;comment&quot;, comment);&#xA;ruleresult.registerObject(&quot;interf&quot;, interf);&#xA;ruleresult.registerObject(&quot;body&quot;, body);&#xA;ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;type2Interface&quot;, type2Interface);&#xA;ruleresult.registerObject(&quot;element&quot;, element);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;comment&quot;).eClass()).equals(&quot;uml.Comment.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;owner&quot;, owner);&#xA;match.registerObject(&quot;method&quot;, method);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeChar.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;classDec&quot;, classDec);&#xA;match.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;match.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;typeAcc&quot;,typeAcc);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;ruleresult.registerObject(&quot;superInterface&quot;, superInterface);&#xA;ruleresult.registerObject(&quot;interfaceRealization&quot;, interfaceRealization);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAcc&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;match.registerObject(&quot;superInterface&quot;, superInterface);&#xA;match.registerObject(&quot;interfaceRealization&quot;, interfaceRealization);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;isApplicableMatch.registerObject(&quot;interfaceRealization&quot;,interfaceRealization);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ta2g&quot;, ta2g);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;cd2c&quot;, cd2c);&#xA;ruleresult.registerObject(&quot;superInterfaceDec&quot;, superInterfaceDec);&#xA;ruleresult.registerObject(&quot;cd2c2&quot;, cd2c2);&#xA;ruleresult.registerObject(&quot;typeAcc&quot;, typeAcc);&#xA;ruleresult.registerObject(&quot;superInterface&quot;, superInterface);&#xA;ruleresult.registerObject(&quot;interfaceRealization&quot;, interfaceRealization);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;interfaceRealization&quot;).eClass()).equals(&quot;uml.InterfaceRealization.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;match.registerObject(&quot;mAnon&quot;, mAnon);&#xA;match.registerObject(&quot;mMember&quot;, mMember);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mConstructor&quot;,mConstructor);&#xA;isApplicableMatch.registerObject(&quot;mAnon&quot;,mAnon);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mConstructor&quot;).eClass()).equals(&quot;modisco.MClassInstanceCreation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mAnon&quot;).eClass()).equals(&quot;modisco.MAnonymousClass.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;mConstructor&quot;, mConstructor);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;mAnon&quot;, mAnon);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;mMember&quot;, mMember);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;type&quot;, type);&#xA;match.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;isApplicableMatch.registerObject(&quot;artifact&quot;,artifact);&#xA;isApplicableMatch.registerObject(&quot;classifier&quot;,classifier);&#xA;isApplicableMatch.registerObject(&quot;c2a&quot;,c2a);&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;artifact&quot;, artifact);&#xA;ruleresult.registerObject(&quot;classifier&quot;, classifier);&#xA;ruleresult.registerObject(&quot;c2a&quot;, c2a);&#xA;ruleresult.registerObject(&quot;manifestation&quot;, manifestation);&#xA;ruleresult.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;artifact&quot;, artifact);&#xA;match.registerObject(&quot;classifier&quot;, classifier);&#xA;match.registerObject(&quot;manifestation&quot;, manifestation);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;isApplicableMatch.registerObject(&quot;artifact&quot;,artifact);&#xA;isApplicableMatch.registerObject(&quot;classifier&quot;,classifier);&#xA;isApplicableMatch.registerObject(&quot;c2a&quot;,c2a);&#xA;isApplicableMatch.registerObject(&quot;manifestation&quot;,manifestation);&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;type&quot;, type);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;artifact&quot;, artifact);&#xA;ruleresult.registerObject(&quot;classifier&quot;, classifier);&#xA;ruleresult.registerObject(&quot;c2a&quot;, c2a);&#xA;ruleresult.registerObject(&quot;manifestation&quot;, manifestation);&#xA;ruleresult.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;manifestation&quot;).eClass()).equals(&quot;uml.Manifestation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;bodyDeclaration&quot;).eClass()).equals(&quot;modisco.MMethodDefinition.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;b2e&quot;, b2e);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;feature&quot;).eClass()).equals(&quot;uml.Operation.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jpt&quot;,jpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jpt&quot;).eClass()).equals(&quot;java.PrimitiveTypeFloat.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umpt&quot;, umpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umpt&quot;,umpt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;a2a&quot;, a2a);&#xA;ruleresult.registerObject(&quot;umpt&quot;, umpt);&#xA;ruleresult.registerObject(&quot;jpt&quot;, jpt);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;umpt&quot;).eClass()).equals(&quot;uml.PrimitiveType.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;owner&quot;, owner);&#xA;match.registerObject(&quot;method&quot;, method);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;owner&quot;, owner);&#xA;ruleresult.registerObject(&quot;o2c&quot;, o2c);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mType&quot;, mType);&#xA;match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass.name&quot;, csp);&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_uClass_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;externals&quot;,externals);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;m2m&quot;,m2m);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;externals&quot;, externals);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;m2m&quot;, m2m);&#xA;ruleresult.registerObject(&quot;uClass&quot;, uClass);&#xA;ruleresult.registerObject(&quot;u2c&quot;, u2c);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mType&quot;).eClass()).equals(&quot;java.UnresolvedTypeDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;externals&quot;, externals);&#xA;match.registerObject(&quot;uClass&quot;, uClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass.name&quot;, true, csp);&#xA;var_uClass_name.setValue(uClass.getName());&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_uClass_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;externals&quot;,externals);&#xA;isApplicableMatch.registerObject(&quot;m2m&quot;,m2m);&#xA;isApplicableMatch.registerObject(&quot;uClass&quot;,uClass);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;externals&quot;, externals);&#xA;ruleresult.registerObject(&quot;mType&quot;, mType);&#xA;ruleresult.registerObject(&quot;m2m&quot;, m2m);&#xA;ruleresult.registerObject(&quot;uClass&quot;, uClass);&#xA;ruleresult.registerObject(&quot;u2c&quot;, u2c);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uClass&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;match.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;mowner&quot;, mowner);&#xA;match.registerObject(&quot;mparam&quot;, mparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;mparam&quot;,mparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;mparam&quot;).eClass()).equals(&quot;java.TypeParameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;uowner&quot;, uowner);&#xA;match.registerObject(&quot;uparam&quot;, uparam);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;uparam&quot;,uparam);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;mowner&quot;, mowner);&#xA;ruleresult.registerObject(&quot;uowner&quot;, uowner);&#xA;ruleresult.registerObject(&quot;uparam&quot;, uparam);&#xA;ruleresult.registerObject(&quot;param2param&quot;, param2param);&#xA;ruleresult.registerObject(&quot;mparam&quot;, mparam);&#xA;ruleresult.registerObject(&quot;interface2interface&quot;, interface2interface);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;uparam&quot;).eClass()).equals(&quot;uml.Class.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;nd2ne&quot;, nd2ne);&#xA;ruleresult.registerObject(&quot;jOwnerType&quot;, jOwnerType);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;ruleresult.registerObject(&quot;jo2uo&quot;, jo2uo);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;uOwnerType&quot;, uOwnerType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;classDec&quot;, classDec);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;feature&quot;, feature);&#xA;match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;match.registerObject(&quot;jType&quot;, jType);&#xA;match.registerObject(&quot;variableDec&quot;, variableDec);&#xA;match.registerObject(&quot;method&quot;, method);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec.name&quot;, true, csp);&#xA;var_variableDec_name.setValue(variableDec.getName());&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.name&quot;, csp);&#xA;var_param_name.setType(&quot;String&quot;);&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.direction&quot;, csp);&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;IsInParameter isInParameter = new IsInParameter();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(isInParameter);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_variableDec_name,var_param_name);&#xA;isInParameter.setRuleName(&quot;NoRuleName&quot;);&#xA;isInParameter.solve(var_param_direction);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;typeAccess&quot;,typeAccess);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;variableDec&quot;,variableDec);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;operation&quot;, operation);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;vd2p&quot;, vd2p);&#xA;ruleresult.registerObject(&quot;param&quot;, param);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;ty2p&quot;, ty2p);&#xA;ruleresult.registerObject(&quot;variableDec&quot;, variableDec);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;variableDec&quot;).eClass()).equals(&quot;modisco.MSingleVariableDeclaration.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.direction&quot;, true, csp);&#xA;var_param_direction.setValue(param.getDirection());&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;IsInParameter isInParameter = new IsInParameter();&#xA;&#xA;&#xA;csp.getConstraints().add(isInParameter);&#xA;&#xA;// Solve CSP&#xA;isInParameter.setRuleName(&quot;NoRuleName&quot;);&#xA;isInParameter.solve(var_param_direction);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;operation&quot;, operation);&#xA;match.registerObject(&quot;param&quot;, param);&#xA;match.registerObject(&quot;uType&quot;, uType);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.name&quot;, true, csp);&#xA;var_param_name.setValue(param.getName());&#xA;var_param_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec.name&quot;, csp);&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_variableDec_name,var_param_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;param&quot;,param);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;operation&quot;, operation);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;vd2p&quot;, vd2p);&#xA;ruleresult.registerObject(&quot;param&quot;, param);&#xA;ruleresult.registerObject(&quot;uType&quot;, uType);&#xA;ruleresult.registerObject(&quot;typeAccess&quot;, typeAccess);&#xA;ruleresult.registerObject(&quot;md2o&quot;, md2o);&#xA;ruleresult.registerObject(&quot;jType&quot;, jType);&#xA;ruleresult.registerObject(&quot;ty2p&quot;, ty2p);&#xA;ruleresult.registerObject(&quot;variableDec&quot;, variableDec);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;param&quot;).eClass()).equals(&quot;uml.Parameter.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;classDec&quot;, classDec);&#xA;match.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlClass&quot;, umlClass);&#xA;match.registerObject(&quot;feature&quot;, feature);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;bd2ne&quot;, bd2ne);&#xA;ruleresult.registerObject(&quot;umlClass&quot;, umlClass);&#xA;ruleresult.registerObject(&quot;feature&quot;, feature);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;classDec&quot;, classDec);&#xA;ruleresult.registerObject(&quot;bodyDeclaration&quot;, bodyDeclaration);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jContainer&quot;, jContainer);&#xA;match.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;match.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;match.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;match.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;parameterizedType&quot;,parameterizedType);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;typeTypeAccess&quot;,typeTypeAccess);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedType&quot;).eClass()).equals(&quot;java.ParameterizedType.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;typeTypeAccess&quot;).eClass()).equals(&quot;java.TypeAccess.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;match.registerObject(&quot;uContainer&quot;, uContainer);&#xA;match.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;match.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;parameterizedClassifier&quot;,parameterizedClassifier);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;umlPackage&quot;, umlPackage);&#xA;ruleresult.registerObject(&quot;ne2neNonParam&quot;, ne2neNonParam);&#xA;ruleresult.registerObject(&quot;uContainer&quot;, uContainer);&#xA;ruleresult.registerObject(&quot;jContainer&quot;, jContainer);&#xA;ruleresult.registerObject(&quot;nonParamType&quot;, nonParamType);&#xA;ruleresult.registerObject(&quot;nonParamPackage&quot;, nonParamPackage);&#xA;ruleresult.registerObject(&quot;parameterizedType&quot;, parameterizedType);&#xA;ruleresult.registerObject(&quot;jp2up&quot;, jp2up);&#xA;ruleresult.registerObject(&quot;ne2ne&quot;, ne2ne);&#xA;ruleresult.registerObject(&quot;typeTypeAccess&quot;, typeTypeAccess);&#xA;ruleresult.registerObject(&quot;nonParamElement&quot;, nonParamElement);&#xA;ruleresult.registerObject(&quot;c2c&quot;, c2c);&#xA;ruleresult.registerObject(&quot;parameterizedClassifier&quot;, parameterizedClassifier);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;parameterizedClassifier&quot;).eClass()).equals(&quot;uml.Interface.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jm&quot;, jm);&#xA;match.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.name&quot;, true, csp);&#xA;var_compilationUnit_name.setValue(compilationUnit.getName());&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.originalFilePath&quot;, true, csp);&#xA;var_compilationUnit_originalFilePath.setValue(compilationUnit.getOriginalFilePath());&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.name&quot;, csp);&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.fileName&quot;, csp);&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_compilationUnit_name,var_artifact_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;um&quot;, um);&#xA;ruleresult.registerObject(&quot;artifact&quot;, artifact);&#xA;ruleresult.registerObject(&quot;jm&quot;, jm);&#xA;ruleresult.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;ruleresult.registerObject(&quot;c2a&quot;, c2a);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;compilationUnit&quot;).eClass()).equals(&quot;java.CompilationUnit.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;um&quot;, um);&#xA;match.registerObject(&quot;artifact&quot;, artifact);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.name&quot;, true, csp);&#xA;var_artifact_name.setValue(artifact.getName());&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.fileName&quot;, true, csp);&#xA;var_artifact_fileName.setValue(artifact.getFileName());&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.name&quot;, csp);&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.originalFilePath&quot;, csp);&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_compilationUnit_name,var_artifact_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;isApplicableMatch.registerObject(&quot;artifact&quot;,artifact);&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jm2um&quot;, jm2um);&#xA;ruleresult.registerObject(&quot;um&quot;, um);&#xA;ruleresult.registerObject(&quot;artifact&quot;, artifact);&#xA;ruleresult.registerObject(&quot;jm&quot;, jm);&#xA;ruleresult.registerObject(&quot;compilationUnit&quot;, compilationUnit);&#xA;ruleresult.registerObject(&quot;c2a&quot;, c2a);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;artifact&quot;).eClass()).equals(&quot;uml.Artifact.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumDec2Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;EnumDec2Enum&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumDec2Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;EnumDec2Enum&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Class_InnerTypeInClass&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeDouble&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeDouble&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeDouble&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeDouble&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4EnumConstInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer&quot;, true, csp);&#xA;var_uContainer_name.setValue(__helper.getValue(&quot;uContainer&quot;, &quot;name&quot;));&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;Anonymous&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;AnonymousClass4EnumConstInType&quot;);&#xA;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4EnumConstInType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer&quot;, true, csp);&#xA;var_uContainer_name.setValue(__helper.getValue(&quot;uContainer&quot;, &quot;name&quot;));&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;Anonymous&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;AnonymousClass4EnumConstInType&quot;);&#xA;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkTypeToPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;LinkTypeToPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2InterfaceGeneralization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2InterfaceGeneralization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreClassInstanceCreation4ArrayInitializer&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreClassInstanceCreation4ArrayInitializer&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotationValue2Comment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag&quot;, true, csp);&#xA;var_tag_body.setValue(__helper.getValue(&quot;tag&quot;, &quot;body&quot;));&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value&quot;, true, csp);&#xA;var_value_name.setValue(__helper.getValue(&quot;value&quot;, &quot;name&quot;));&#xA;var_value_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotationValue2Comment&quot;);&#xA;eq0.solve(var_value_name,var_tag_body);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_tag_body.setBound(false);&#xA;&#x9;eq0.solve(var_value_name,var_tag_body);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;tag&quot;, &quot;body&quot;, var_tag_body.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotationValue2Comment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag&quot;, true, csp);&#xA;var_tag_body.setValue(__helper.getValue(&quot;tag&quot;, &quot;body&quot;));&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value&quot;, true, csp);&#xA;var_value_name.setValue(__helper.getValue(&quot;value&quot;, &quot;name&quot;));&#xA;var_value_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotationValue2Comment&quot;);&#xA;eq0.solve(var_value_name,var_tag_body);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_value_name.setBound(false);&#xA;&#x9;eq0.solve(var_value_name,var_tag_body);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;value&quot;, &quot;name&quot;, var_value_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeDependency2UsageDependency&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeDependency2UsageDependency&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Interface&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Interface&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Interface&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Interface&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeShort&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeShort&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeShort&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeShort&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceDec2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceDec2Interface&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;InterfaceDec2Interface&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceDec2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;InterfaceDec2Interface&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;InterfaceDec2Interface&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDec2OperationWithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;comment&quot;, &quot;body&quot;, &quot;Constructor&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;Eq eq2 = new Eq();&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;eq2.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;eq2.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_isStatic.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;eq2.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;isStatic&quot;, var_feature_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDec2OperationWithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;comment&quot;, &quot;body&quot;, &quot;Constructor&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;Eq eq2 = new Eq();&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;eq2.setRuleName(&quot;ConstructorDec2OperationWithModifier&quot;);&#xA;eq2.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_modifier_static.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;eq2.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;static&quot;, var_modifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassDec2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ClassDec2Class&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;ClassDec2Class&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassDec2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;ClassDec2Class&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;ClassDec2Class&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;AnnotationTypeDeclaration2Interface_WithModifier&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassDecWithModifier2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;eq0.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ClassDecWithModifier2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;ClassDecWithModifier2Class&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InMethod_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InMethod_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeVoid&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeVoid&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeVoid&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeVoid&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDec2Operation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;comment&quot;, &quot;body&quot;, &quot;Constructor&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ConstructorDec2Operation&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ConstructorDec2Operation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;comment&quot;, &quot;body&quot;, &quot;Constructor&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ConstructorDec2Operation&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDec2OperationWithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;eq0.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;eq1.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_isStatic.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;eq1.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;isStatic&quot;, var_feature_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDec2OperationWithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;eq0.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;eq1.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;MethodDec2OperationWithModifier&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;var_modifier_static.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;eq1.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;static&quot;, var_modifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2Generalization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2Generalization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeDeclaration2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;AnnotationTypeDeclaration2Interface&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;AnnotationTypeDeclaration2Interface&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnnotationTypeDeclaration2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;AnnotationTypeDeclaration2Interface&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;AnnotationTypeDeclaration2Interface&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AbstractTypeAccess2ReturnParam&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam&quot;, true, csp);&#xA;var_returnParam_direction.setValue(__helper.getValue(&quot;returnParam&quot;, &quot;direction&quot;));&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;IsReturn isReturn0 = new IsReturn();&#xA;csp.getConstraints().add(isReturn0);&#xA;&#xA;isReturn0.setRuleName(&quot;AbstractTypeAccess2ReturnParam&quot;);&#xA;isReturn0.solve(var_returnParam_direction);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_returnParam_direction.setBound(false);&#xA;&#x9;isReturn0.solve(var_returnParam_direction);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;returnParam&quot;, &quot;direction&quot;, var_returnParam_direction.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AbstractTypeAccess2ReturnParam&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam&quot;, true, csp);&#xA;var_returnParam_direction.setValue(__helper.getValue(&quot;returnParam&quot;, &quot;direction&quot;));&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;IsReturn isReturn0 = new IsReturn();&#xA;csp.getConstraints().add(isReturn0);&#xA;&#xA;isReturn0.setRuleName(&quot;AbstractTypeAccess2ReturnParam&quot;);&#xA;isReturn0.solve(var_returnParam_direction);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;isReturn0.solve(var_returnParam_direction);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotation2Comment4SingleVariableDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type&quot;, true, csp);&#xA;var_type_name.setValue(__helper.getValue(&quot;type&quot;, &quot;name&quot;));&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment&quot;, true, csp);&#xA;var_comment_body.setValue(__helper.getValue(&quot;comment&quot;, &quot;body&quot;));&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotation2Comment4SingleVariableDeclaration&quot;);&#xA;eq0.solve(var_comment_body,var_type_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_comment_body.setBound(false);&#xA;&#x9;eq0.solve(var_comment_body,var_type_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;comment&quot;, &quot;body&quot;, var_comment_body.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotation2Comment4SingleVariableDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type&quot;, true, csp);&#xA;var_type_name.setValue(__helper.getValue(&quot;type&quot;, &quot;name&quot;));&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment&quot;, true, csp);&#xA;var_comment_body.setValue(__helper.getValue(&quot;comment&quot;, &quot;body&quot;));&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotation2Comment4SingleVariableDeclaration&quot;);&#xA;eq0.solve(var_comment_body,var_type_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;eq0.solve(var_comment_body,var_type_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceDecWithModifier2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;NonParameterizedName nonParameterizedName1 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;eq0.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;nonParameterizedName1.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;nonParameterizedName1.solve(var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;nonParameterizedName1.solve(var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InterfaceDecWithModifier2Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;NonParameterizedName nonParameterizedName0 = new NonParameterizedName();&#xA;csp.getConstraints().add(nonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility2 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility2);&#xA;&#xA;nonParameterizedName0.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;nonParameterizedName0.solve(var_feature_name);&#xA;&#xA;eq1.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;jVisibility2umlVisibility2.setRuleName(&quot;InterfaceDecWithModifier2Interface&quot;);&#xA;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;nonParameterizedName0.solve(var_feature_name);&#xA;&#x9;eq1.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;jVisibility2umlVisibility2.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaModel2UmlModelRule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;rootModel&quot;, &quot;name&quot;, &quot;root model&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;commonTypes&quot;, &quot;name&quot;, &quot;Common Java datatypes&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;sourceRefModel&quot;, &quot;name&quot;, &quot;source references&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;externalModel&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel&quot;, true, csp);&#xA;var_javaModel_name.setValue(__helper.getValue(&quot;javaModel&quot;, &quot;name&quot;));&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel&quot;, true, csp);&#xA;var_umlModel_name.setValue(__helper.getValue(&quot;umlModel&quot;, &quot;name&quot;));&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaModel2UmlModelRule&quot;);&#xA;eq0.solve(var_javaModel_name,var_umlModel_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umlModel_name.setBound(false);&#xA;&#x9;eq0.solve(var_javaModel_name,var_umlModel_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umlModel&quot;, &quot;name&quot;, var_umlModel_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaModel2UmlModelRule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;rootModel&quot;, &quot;name&quot;, &quot;root model&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;commonTypes&quot;, &quot;name&quot;, &quot;Common Java datatypes&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;sourceRefModel&quot;, &quot;name&quot;, &quot;source references&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;externalModel&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel&quot;, true, csp);&#xA;var_javaModel_name.setValue(__helper.getValue(&quot;javaModel&quot;, &quot;name&quot;));&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel&quot;, true, csp);&#xA;var_umlModel_name.setValue(__helper.getValue(&quot;umlModel&quot;, &quot;name&quot;));&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaModel2UmlModelRule&quot;);&#xA;eq0.solve(var_javaModel_name,var_umlModel_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_javaModel_name.setBound(false);&#xA;&#x9;eq0.solve(var_javaModel_name,var_umlModel_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;javaModel&quot;, &quot;name&quot;, var_javaModel_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumDecWithModifier2Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;EnumDecWithModifier2Enum&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;EnumDecWithModifier2Enum&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;EnumDecWithModifier2Enum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;eq0.setRuleName(&quot;EnumDecWithModifier2Enum&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;EnumDecWithModifier2Enum&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeBoolean&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeBoolean&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeBoolean&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotationValueEntry2Comment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr&quot;, true, csp);&#xA;var_expr_escapedValue.setValue(__helper.getValue(&quot;expr&quot;, &quot;escapedValue&quot;));&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry&quot;, true, csp);&#xA;var_entry_body.setValue(__helper.getValue(&quot;entry&quot;, &quot;body&quot;));&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotationValueEntry2Comment&quot;);&#xA;eq0.solve(var_entry_body,var_expr_escapedValue);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_entry_body.setBound(false);&#xA;&#x9;eq0.solve(var_entry_body,var_expr_escapedValue);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;entry&quot;, &quot;body&quot;, var_entry_body.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotationValueEntry2Comment&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr&quot;, true, csp);&#xA;var_expr_escapedValue.setValue(__helper.getValue(&quot;expr&quot;, &quot;escapedValue&quot;));&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry&quot;, true, csp);&#xA;var_entry_body.setValue(__helper.getValue(&quot;entry&quot;, &quot;body&quot;));&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotationValueEntry2Comment&quot;);&#xA;eq0.solve(var_entry_body,var_expr_escapedValue);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_expr_escapedValue.setBound(false);&#xA;&#x9;eq0.solve(var_entry_body,var_expr_escapedValue);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;expr&quot;, &quot;escapedValue&quot;, var_expr_escapedValue.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreOrphanTypesEdge&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreOrphanTypesEdge&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property_WithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf&quot;, true, csp);&#xA;var_vdf_name.setValue(__helper.getValue(&quot;vdf&quot;, &quot;name&quot;));&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;Eq eq2 = new Eq();&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;eq2.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;eq2.solve(var_vdf_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_isStatic.setBound(false);&#xA;&#x9;var_feature_visibility.setBound(false);&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;eq2.solve(var_vdf_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;isStatic&quot;, var_feature_isStatic.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;visibility&quot;, var_feature_visibility.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property_WithModifier&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_isStatic.setValue(__helper.getValue(&quot;feature&quot;, &quot;isStatic&quot;));&#xA;var_feature_isStatic.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_static.setValue(__helper.getValue(&quot;modifier&quot;, &quot;static&quot;));&#xA;var_modifier_static.setType(&quot;boolean&quot;);&#xA;&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_visibility.setValue(__helper.getValue(&quot;feature&quot;, &quot;visibility&quot;));&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier&quot;, true, csp);&#xA;var_modifier_visibility.setValue(__helper.getValue(&quot;modifier&quot;, &quot;visibility&quot;));&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf&quot;, true, csp);&#xA;var_vdf_name.setValue(__helper.getValue(&quot;vdf&quot;, &quot;name&quot;));&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;JVisibility2umlVisibility jVisibility2umlVisibility1 = new JVisibility2umlVisibility();&#xA;csp.getConstraints().add(jVisibility2umlVisibility1);&#xA;&#xA;Eq eq2 = new Eq();&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#xA;jVisibility2umlVisibility1.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;eq2.setRuleName(&quot;FieldDec2Property_WithModifier&quot;);&#xA;eq2.solve(var_vdf_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_modifier_static.setBound(false);&#xA;&#x9;var_modifier_visibility.setBound(false);&#xA;&#x9;var_vdf_name.setBound(false);&#xA;&#x9;eq0.solve(var_modifier_static,var_feature_isStatic);&#xA;&#x9;jVisibility2umlVisibility1.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#x9;eq2.solve(var_vdf_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;static&quot;, var_modifier_static.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;modifier&quot;, &quot;visibility&quot;, var_modifier_visibility.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;vdf&quot;, &quot;name&quot;, var_vdf_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeByte&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeByte&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeByte&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeByte&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaPackageToUMLPackage_underModel&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up&quot;, true, csp);&#xA;var_up_name.setValue(__helper.getValue(&quot;up&quot;, &quot;name&quot;));&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp&quot;, true, csp);&#xA;var_jp_name.setValue(__helper.getValue(&quot;jp&quot;, &quot;name&quot;));&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um&quot;, true, csp);&#xA;var_um_name.setValue(__helper.getValue(&quot;um&quot;, &quot;name&quot;));&#xA;var_um_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm&quot;, true, csp);&#xA;var_jm_name.setValue(__helper.getValue(&quot;jm&quot;, &quot;name&quot;));&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;JavaPackageToUMLPackage_underModel&quot;);&#xA;eq0.solve(var_jm_name,var_um_name);&#xA;&#xA;eq1.setRuleName(&quot;JavaPackageToUMLPackage_underModel&quot;);&#xA;eq1.solve(var_up_name,var_jp_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_up_name.setBound(false);&#xA;&#x9;eq0.solve(var_jm_name,var_um_name);&#xA;&#x9;eq1.solve(var_up_name,var_jp_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;up&quot;, &quot;name&quot;, var_up_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaPackageToUMLPackage_underModel&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up&quot;, true, csp);&#xA;var_up_name.setValue(__helper.getValue(&quot;up&quot;, &quot;name&quot;));&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp&quot;, true, csp);&#xA;var_jp_name.setValue(__helper.getValue(&quot;jp&quot;, &quot;name&quot;));&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um&quot;, true, csp);&#xA;var_um_name.setValue(__helper.getValue(&quot;um&quot;, &quot;name&quot;));&#xA;var_um_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm&quot;, true, csp);&#xA;var_jm_name.setValue(__helper.getValue(&quot;jm&quot;, &quot;name&quot;));&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;JavaPackageToUMLPackage_underModel&quot;);&#xA;eq0.solve(var_jm_name,var_um_name);&#xA;&#xA;eq1.setRuleName(&quot;JavaPackageToUMLPackage_underModel&quot;);&#xA;eq1.solve(var_up_name,var_jp_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jp_name.setBound(false);&#xA;&#x9;eq0.solve(var_jm_name,var_um_name);&#xA;&#x9;eq1.solve(var_up_name,var_jp_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jp&quot;, &quot;name&quot;, var_jp_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4Interface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InMethod_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InMethod_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeLong&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeLong&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeLong&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeLong&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeInt&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeInt&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeInt&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeInt&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf&quot;, true, csp);&#xA;var_vdf_name.setValue(__helper.getValue(&quot;vdf&quot;, &quot;name&quot;));&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;FieldDec2Property&quot;);&#xA;eq0.solve(var_vdf_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_vdf_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf&quot;, true, csp);&#xA;var_vdf_name.setValue(__helper.getValue(&quot;vdf&quot;, &quot;name&quot;));&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;FieldDec2Property&quot;);&#xA;eq0.solve(var_vdf_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_vdf_name.setBound(false);&#xA;&#x9;eq0.solve(var_vdf_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;vdf&quot;, &quot;name&quot;, var_vdf_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedClassDec2OrphanedClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;umlPackage&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphanedClassDec2OrphanedClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;umlPackage&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4EnumConstInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer&quot;, true, csp);&#xA;var_uContainer_name.setValue(__helper.getValue(&quot;uContainer&quot;, &quot;name&quot;));&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;Anonymous&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;AnonymousClass4EnumConstInPackage&quot;);&#xA;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4EnumConstInPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer&quot;, true, csp);&#xA;var_uContainer_name.setValue(__helper.getValue(&quot;uContainer&quot;, &quot;name&quot;));&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;Anonymous&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;AddPrefix addPrefix0 = new AddPrefix();&#xA;csp.getConstraints().add(addPrefix0);&#xA;&#xA;addPrefix0.setRuleName(&quot;AnonymousClass4EnumConstInPackage&quot;);&#xA;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;addPrefix0.solve(var_uContainer_name,var_literal0,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayType2NonArrayType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ArrayType2NonArrayType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Anonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Anonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphandedPrimitive2PrimitiveType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;umlPackage&quot;, &quot;name&quot;, &quot;Common Java datatypes&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OrphandedPrimitive2PrimitiveType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;umlPackage&quot;, &quot;name&quot;, &quot;Common Java datatypes&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaPackageToUMLPackage_underPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp&quot;, true, csp);&#xA;var_jp_name.setValue(__helper.getValue(&quot;jp&quot;, &quot;name&quot;));&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up&quot;, true, csp);&#xA;var_up_name.setValue(__helper.getValue(&quot;up&quot;, &quot;name&quot;));&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaPackageToUMLPackage_underPackage&quot;);&#xA;eq0.solve(var_up_name,var_jp_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_up_name.setBound(false);&#xA;&#x9;eq0.solve(var_up_name,var_jp_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;up&quot;, &quot;name&quot;, var_up_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaPackageToUMLPackage_underPackage&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp&quot;, true, csp);&#xA;var_jp_name.setValue(__helper.getValue(&quot;jp&quot;, &quot;name&quot;));&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up&quot;, true, csp);&#xA;var_up_name.setValue(__helper.getValue(&quot;up&quot;, &quot;name&quot;));&#xA;var_up_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaPackageToUMLPackage_underPackage&quot;);&#xA;eq0.solve(var_up_name,var_jp_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jp_name.setBound(false);&#xA;&#x9;eq0.solve(var_up_name,var_jp_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jp&quot;, &quot;name&quot;, var_jp_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotation2Comment4BodyDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type&quot;, true, csp);&#xA;var_type_name.setValue(__helper.getValue(&quot;type&quot;, &quot;name&quot;));&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment&quot;, true, csp);&#xA;var_comment_body.setValue(__helper.getValue(&quot;comment&quot;, &quot;body&quot;));&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotation2Comment4BodyDeclaration&quot;);&#xA;eq0.solve(var_comment_body,var_type_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_comment_body.setBound(false);&#xA;&#x9;eq0.solve(var_comment_body,var_type_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;comment&quot;, &quot;body&quot;, var_comment_body.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;JavaAnnotation2Comment4BodyDeclaration&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type&quot;, true, csp);&#xA;var_type_name.setValue(__helper.getValue(&quot;type&quot;, &quot;name&quot;));&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment&quot;, true, csp);&#xA;var_comment_body.setValue(__helper.getValue(&quot;comment&quot;, &quot;body&quot;));&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;JavaAnnotation2Comment4BodyDeclaration&quot;);&#xA;eq0.solve(var_comment_body,var_type_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;eq0.solve(var_comment_body,var_type_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InAnnotationType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InAnnotationType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Class&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Class&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Class&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Class&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeChar&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeChar&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeChar&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeChar&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2InterfaceRealization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeAccess2InterfaceRealization&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;AnonymousClass4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;feature&quot;, &quot;name&quot;, &quot;Anonymous&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Manifestation4CompilationUnit2Artifact&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;Manifestation4CompilationUnit2Artifact&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDec2Operation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;MethodDec2Operation&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_feature_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;feature&quot;, &quot;name&quot;, var_feature_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;MethodDec2Operation&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(__helper.getValue(&quot;bodyDeclaration&quot;, &quot;name&quot;));&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature&quot;, true, csp);&#xA;var_feature_name.setValue(__helper.getValue(&quot;feature&quot;, &quot;name&quot;));&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;MethodDec2Operation&quot;);&#xA;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_bodyDeclaration_name.setBound(false);&#xA;&#x9;eq0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;bodyDeclaration&quot;, &quot;name&quot;, var_bodyDeclaration_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Class_InnerTypeInInterface&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeFloat&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeFloat&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_umpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;umpt&quot;, &quot;name&quot;, var_umpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PrimitiveTypeFloat&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt&quot;, true, csp);&#xA;var_umpt_name.setValue(__helper.getValue(&quot;umpt&quot;, &quot;name&quot;));&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt&quot;, true, csp);&#xA;var_jpt_name.setValue(__helper.getValue(&quot;jpt&quot;, &quot;name&quot;));&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;PrimitiveTypeFloat&quot;);&#xA;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jpt_name.setBound(false);&#xA;&#x9;eq0.solve(var_jpt_name,var_umpt_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jpt&quot;, &quot;name&quot;, var_jpt_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4IAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;InnerDeclaration2InnerClassifier_InMethod4IAnonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedTypeDeclaration2Type&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;externals&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass&quot;, true, csp);&#xA;var_uClass_name.setValue(__helper.getValue(&quot;uClass&quot;, &quot;name&quot;));&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedTypeDeclaration2Type&quot;);&#xA;eq0.solve(var_mType_name,var_uClass_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_uClass_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_uClass_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;uClass&quot;, &quot;name&quot;, var_uClass_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;UnresolvedTypeDeclaration2Type&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;externals&quot;, &quot;name&quot;, &quot;externals&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass&quot;, true, csp);&#xA;var_uClass_name.setValue(__helper.getValue(&quot;uClass&quot;, &quot;name&quot;));&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType&quot;, true, csp);&#xA;var_mType_name.setValue(__helper.getValue(&quot;mType&quot;, &quot;name&quot;));&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;UnresolvedTypeDeclaration2Type&quot;);&#xA;eq0.solve(var_mType_name,var_uClass_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_mType_name.setBound(false);&#xA;&#x9;eq0.solve(var_mType_name,var_uClass_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;mType&quot;, &quot;name&quot;, var_mType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4_Anonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4_Anonymous&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeParameter2Object_InInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;uparam&quot;, &quot;name&quot;, &quot;T&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;FieldDec2Property4Class&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInAnnotationType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInAnnotationType&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;VariableDec2Parameter4&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec&quot;, true, csp);&#xA;var_variableDec_name.setValue(__helper.getValue(&quot;variableDec&quot;, &quot;name&quot;));&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param&quot;, true, csp);&#xA;var_param_name.setValue(__helper.getValue(&quot;param&quot;, &quot;name&quot;));&#xA;var_param_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param&quot;, true, csp);&#xA;var_param_direction.setValue(__helper.getValue(&quot;param&quot;, &quot;direction&quot;));&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;IsInParameter isInParameter1 = new IsInParameter();&#xA;csp.getConstraints().add(isInParameter1);&#xA;&#xA;eq0.setRuleName(&quot;VariableDec2Parameter4&quot;);&#xA;eq0.solve(var_variableDec_name,var_param_name);&#xA;&#xA;isInParameter1.setRuleName(&quot;VariableDec2Parameter4&quot;);&#xA;isInParameter1.solve(var_param_direction);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_param_name.setBound(false);&#xA;&#x9;var_param_direction.setBound(false);&#xA;&#x9;eq0.solve(var_variableDec_name,var_param_name);&#xA;&#x9;isInParameter1.solve(var_param_direction);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;param&quot;, &quot;name&quot;, var_param_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;param&quot;, &quot;direction&quot;, var_param_direction.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;VariableDec2Parameter4&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec&quot;, true, csp);&#xA;var_variableDec_name.setValue(__helper.getValue(&quot;variableDec&quot;, &quot;name&quot;));&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param&quot;, true, csp);&#xA;var_param_name.setValue(__helper.getValue(&quot;param&quot;, &quot;name&quot;));&#xA;var_param_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param&quot;, true, csp);&#xA;var_param_direction.setValue(__helper.getValue(&quot;param&quot;, &quot;direction&quot;));&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;IsInParameter isInParameter0 = new IsInParameter();&#xA;csp.getConstraints().add(isInParameter0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;isInParameter0.setRuleName(&quot;VariableDec2Parameter4&quot;);&#xA;isInParameter0.solve(var_param_direction);&#xA;&#xA;eq1.setRuleName(&quot;VariableDec2Parameter4&quot;);&#xA;eq1.solve(var_variableDec_name,var_param_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_variableDec_name.setBound(false);&#xA;&#x9;isInParameter0.solve(var_param_direction);&#xA;&#x9;eq1.solve(var_variableDec_name,var_param_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;variableDec&quot;, &quot;name&quot;, var_variableDec_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;OperationInEnum&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInInterface&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName1 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName1);&#xA;&#xA;eq0.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#xA;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;parameterizedNameFitsNonParameterizedName1.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#xA;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;var_parameterizedClassifier_name.setBound(false);&#xA;&#x9;eq0.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;parameterizedNameFitsNonParameterizedName1.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;, var_parameterizedClassifier_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(__helper.getValue(&quot;parameterizedClassifier&quot;, &quot;name&quot;));&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(__helper.getValue(&quot;parameterizedType&quot;, &quot;name&quot;));&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(__helper.getValue(&quot;nonParamElement&quot;, &quot;name&quot;));&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName0 = new ParameterizedNameFitsNonParameterizedName();&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;parameterizedNameFitsNonParameterizedName0.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#xA;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;eq1.setRuleName(&quot;ParameterizedType2Interface_InnerTypeInClass&quot;);&#xA;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_parameterizedType_name.setBound(false);&#xA;&#x9;parameterizedNameFitsNonParameterizedName0.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#x9;eq1.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;parameterizedType&quot;, &quot;name&quot;, var_parameterizedType_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnit2Artifact&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;um&quot;, &quot;name&quot;, &quot;source references&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit&quot;, true, csp);&#xA;var_compilationUnit_name.setValue(__helper.getValue(&quot;compilationUnit&quot;, &quot;name&quot;));&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit&quot;, true, csp);&#xA;var_compilationUnit_originalFilePath.setValue(__helper.getValue(&quot;compilationUnit&quot;, &quot;originalFilePath&quot;));&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact&quot;, true, csp);&#xA;var_artifact_fileName.setValue(__helper.getValue(&quot;artifact&quot;, &quot;fileName&quot;));&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact&quot;, true, csp);&#xA;var_artifact_name.setValue(__helper.getValue(&quot;artifact&quot;, &quot;name&quot;));&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;CompilationUnit2Artifact&quot;);&#xA;eq0.solve(var_compilationUnit_name,var_artifact_name);&#xA;&#xA;eq1.setRuleName(&quot;CompilationUnit2Artifact&quot;);&#xA;eq1.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_artifact_name.setBound(false);&#xA;&#x9;var_artifact_fileName.setBound(false);&#xA;&#x9;eq0.solve(var_compilationUnit_name,var_artifact_name);&#xA;&#x9;eq1.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;artifact&quot;, &quot;name&quot;, var_artifact_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;artifact&quot;, &quot;fileName&quot;, var_artifact_fileName.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;CompilationUnit2Artifact&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;um&quot;, &quot;name&quot;, &quot;source references&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit&quot;, true, csp);&#xA;var_compilationUnit_name.setValue(__helper.getValue(&quot;compilationUnit&quot;, &quot;name&quot;));&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit&quot;, true, csp);&#xA;var_compilationUnit_originalFilePath.setValue(__helper.getValue(&quot;compilationUnit&quot;, &quot;originalFilePath&quot;));&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact&quot;, true, csp);&#xA;var_artifact_fileName.setValue(__helper.getValue(&quot;artifact&quot;, &quot;fileName&quot;));&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact&quot;, true, csp);&#xA;var_artifact_name.setValue(__helper.getValue(&quot;artifact&quot;, &quot;name&quot;));&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;CompilationUnit2Artifact&quot;);&#xA;eq0.solve(var_compilationUnit_name,var_artifact_name);&#xA;&#xA;eq1.setRuleName(&quot;CompilationUnit2Artifact&quot;);&#xA;eq1.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_compilationUnit_name.setBound(false);&#xA;&#x9;var_compilationUnit_originalFilePath.setBound(false);&#xA;&#x9;eq0.solve(var_compilationUnit_name,var_artifact_name);&#xA;&#x9;eq1.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;compilationUnit&quot;, &quot;name&quot;, var_compilationUnit_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;compilationUnit&quot;, &quot;originalFilePath&quot;, var_compilationUnit_originalFilePath.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value.name&quot;, true, csp);&#xA;var_value_name.setValue(value.getName());&#xA;var_value_name.setType(&quot;String&quot;);&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag.body&quot;, true, csp);&#xA;var_tag_body.setValue(tag.getBody());&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_value_name,var_tag_body);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam.direction&quot;, true, csp);&#xA;var_returnParam_direction.setValue(returnParam.getDirection());&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;IsReturn isReturn = new IsReturn();&#xA;&#xA;&#xA;csp.getConstraints().add(isReturn);&#xA;&#xA;// Solve CSP&#xA;isReturn.setRuleName(&quot;NoRuleName&quot;);&#xA;isReturn.solve(var_returnParam_direction);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, true, csp);&#xA;var_comment_body.setValue(comment.getBody());&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel.name&quot;, true, csp);&#xA;var_javaModel_name.setValue(javaModel.getName());&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel.name&quot;, true, csp);&#xA;var_umlModel_name.setValue(umlModel.getName());&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_javaModel_name,var_umlModel_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry.body&quot;, true, csp);&#xA;var_entry_body.setValue(entry.getBody());&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr.escapedValue&quot;, true, csp);&#xA;var_expr_escapedValue.setValue(expr.getEscapedValue());&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_entry_body,var_expr_escapedValue);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, true, csp);&#xA;var_modifier_static.setValue(modifier.isStatic());&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, true, csp);&#xA;var_feature_isStatic.setValue(feature.isStatic());&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, true, csp);&#xA;var_modifier_visibility.setValue(modifier.getVisibility());&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, true, csp);&#xA;var_feature_visibility.setValue(feature.getVisibility());&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, true, csp);&#xA;var_vdf_name.setValue(vdf.getName());&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_vdf_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm.name&quot;, true, csp);&#xA;var_jm_name.setValue(jm.getName());&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um.name&quot;, true, csp);&#xA;var_um_name.setValue(um.getName());&#xA;var_um_name.setType(&quot;String&quot;);&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, true, csp);&#xA;var_up_name.setValue(up.getName());&#xA;var_up_name.setType(&quot;String&quot;);&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, true, csp);&#xA;var_jp_name.setValue(jp.getName());&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jm_name,var_um_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_up_name,var_jp_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, true, csp);&#xA;var_vdf_name.setValue(vdf.getName());&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_vdf_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, true, csp);&#xA;var_up_name.setValue(up.getName());&#xA;var_up_name.setType(&quot;String&quot;);&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, true, csp);&#xA;var_jp_name.setValue(jp.getName());&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_up_name,var_jp_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, true, csp);&#xA;var_comment_body.setValue(comment.getBody());&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, true, csp);&#xA;var_bodyDeclaration_name.setValue(bodyDeclaration.getName());&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, true, csp);&#xA;var_feature_name.setValue(feature.getName());&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, true, csp);&#xA;var_jpt_name.setValue(jpt.getName());&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, true, csp);&#xA;var_umpt_name.setValue(umpt.getName());&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, true, csp);&#xA;var_mType_name.setValue(mType.getName());&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass.name&quot;, true, csp);&#xA;var_uClass_name.setValue(uClass.getName());&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_uClass_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec.name&quot;, true, csp);&#xA;var_variableDec_name.setValue(variableDec.getName());&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.name&quot;, true, csp);&#xA;var_param_name.setValue(param.getName());&#xA;var_param_name.setType(&quot;String&quot;);&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.direction&quot;, true, csp);&#xA;var_param_direction.setValue(param.getDirection());&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;IsInParameter isInParameter = new IsInParameter();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(isInParameter);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_variableDec_name,var_param_name);&#xA;isInParameter.setRuleName(&quot;NoRuleName&quot;);&#xA;isInParameter.solve(var_param_direction);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, true, csp);&#xA;var_parameterizedType_name.setValue(parameterizedType.getName());&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, true, csp);&#xA;var_parameterizedClassifier_name.setValue(parameterizedClassifier.getName());&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.name&quot;, true, csp);&#xA;var_compilationUnit_name.setValue(compilationUnit.getName());&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.name&quot;, true, csp);&#xA;var_artifact_name.setValue(artifact.getName());&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.originalFilePath&quot;, true, csp);&#xA;var_compilationUnit_originalFilePath.setValue(compilationUnit.getOriginalFilePath());&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.fileName&quot;, true, csp);&#xA;var_artifact_fileName.setValue(artifact.getFileName());&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_compilationUnit_name,var_artifact_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDec2Enum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeDouble/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InEnum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;t2t&quot;,t2t);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mType&quot;,mType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/LinkTypeToPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;childInterface&quot;,childInterface);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceGeneralization/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;create&quot;,create);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreClassInstanceCreation4ArrayInitializer/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_value_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;value.name&quot;, csp);&#xA;var_value_name.setType(&quot;String&quot;);&#xA;Variable var_tag_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;tag.body&quot;, csp);&#xA;var_tag_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_value_name,var_tag_body);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValue2Comment/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uTrgType&quot;,uTrgType);&#xA;isApplicableMatch.registerObject(&quot;mPackage&quot;,mPackage);&#xA;isApplicableMatch.registerObject(&quot;mTrgType&quot;,mTrgType);&#xA;isApplicableMatch.registerObject(&quot;trg2Trg&quot;,trg2Trg);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;mSrcType&quot;,mSrcType);&#xA;isApplicableMatch.registerObject(&quot;src2Src&quot;,src2Src);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;uSrcType&quot;,uSrcType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeDependency2UsageDependency/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeShort/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDec2Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2OperationWithModifier/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDec2Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface_WithModifier/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ClassDecWithModifier2Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeVoid/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ConstructorDec2Operation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2OperationWithModifier/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;superClassDec&quot;,superClassDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;umlClassifier&quot;,umlClassifier);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;superClass&quot;,superClass);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2Generalization/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnnotationTypeDeclaration2Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_returnParam_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;returnParam.direction&quot;, csp);&#xA;var_returnParam_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create constraints&#xA;IsReturn isReturn = new IsReturn();&#xA;&#xA;&#xA;csp.getConstraints().add(isReturn);&#xA;&#xA;// Solve CSP&#xA;isReturn.setRuleName(&quot;NoRuleName&quot;);&#xA;isReturn.solve(var_returnParam_direction);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;m2o&quot;,m2o);&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AbstractTypeAccess2ReturnParam/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Enum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, csp);&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;v2p&quot;,v2p);&#xA;isApplicableMatch.registerObject(&quot;variable&quot;,variable);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4SingleVariableDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;a2c&quot;,a2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;NonParameterizedName nonParameterizedName = new NonParameterizedName();&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(nonParameterizedName);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;nonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;nonParameterizedName.solve(var_feature_name);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InterfaceDecWithModifier2Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_javaModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaModel.name&quot;, csp);&#xA;var_javaModel_name.setType(&quot;String&quot;);&#xA;Variable var_umlModel_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umlModel.name&quot;, csp);&#xA;var_umlModel_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_javaModel_name,var_umlModel_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaModel2UmlModelRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/EnumDecWithModifier2Enum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeBoolean/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_entry_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;entry.body&quot;, csp);&#xA;var_entry_body.setType(&quot;String&quot;);&#xA;Variable var_expr_escapedValue = CSPFactoryHelper.eINSTANCE.createVariable(&quot;expr.escapedValue&quot;, csp);&#xA;var_expr_escapedValue.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_entry_body,var_expr_escapedValue);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;tag&quot;,tag);&#xA;isApplicableMatch.registerObject(&quot;annotation&quot;,annotation);&#xA;isApplicableMatch.registerObject(&quot;array&quot;,array);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;value&quot;,value);&#xA;isApplicableMatch.registerObject(&quot;comment&quot;,comment);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotationValueEntry2Comment/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;isApplicableMatch.registerObject(&quot;pt&quot;,pt);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/IgnoreOrphanTypesEdge/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_modifier_static = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.static&quot;, csp);&#xA;var_modifier_static.setType(&quot;Boolean&quot;);&#xA;Variable var_feature_isStatic = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.isStatic&quot;, csp);&#xA;var_feature_isStatic.setType(&quot;Boolean&quot;);&#xA;Variable var_modifier_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;modifier.visibility&quot;, csp);&#xA;var_modifier_visibility.setType(&quot;java.VisibilityKind&quot;);&#xA;Variable var_feature_visibility = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.visibility&quot;, csp);&#xA;var_feature_visibility.setType(&quot;uml.VisibilityKind&quot;);&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, csp);&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;JVisibility2umlVisibility jVisibility2umlVisibility = new JVisibility2umlVisibility();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(jVisibility2umlVisibility);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_modifier_static,var_feature_isStatic);&#xA;jVisibility2umlVisibility.setRuleName(&quot;NoRuleName&quot;);&#xA;jVisibility2umlVisibility.solve(var_modifier_visibility,var_feature_visibility);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property_WithModifier/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeByte/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jm_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jm.name&quot;, true, csp);&#xA;var_jm_name.setValue(jm.getName());&#xA;var_jm_name.setType(&quot;String&quot;);&#xA;Variable var_um_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;um.name&quot;, true, csp);&#xA;var_um_name.setValue(um.getName());&#xA;var_um_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, csp);&#xA;var_up_name.setType(&quot;String&quot;);&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, csp);&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jm_name,var_um_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underModel/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Interface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;mmethod&quot;,mmethod);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InMethod_InInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeLong/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeInt/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_vdf_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;vdf.name&quot;, csp);&#xA;var_vdf_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_vdf_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphanedClassDec2OrphanedClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Anonymous&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_uContainer_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uContainer.name&quot;, true, csp);&#xA;var_uContainer_name.setValue(uContainer.getName());&#xA;var_uContainer_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;AddPrefix addPrefix = new AddPrefix();&#xA;&#xA;&#xA;csp.getConstraints().add(addPrefix);&#xA;&#xA;// Solve CSP&#xA;addPrefix.setRuleName(&quot;NoRuleName&quot;);&#xA;addPrefix.solve(var_uContainer_name,literal0,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;uPackage&quot;,uPackage);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4EnumConstInPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ne2ne1&quot;,ne2ne1);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ArrayType2NonArrayType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Anonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jPackage&quot;,jPackage);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OrphandedPrimitive2PrimitiveType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_up_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;up.name&quot;, csp);&#xA;var_up_name.setType(&quot;String&quot;);&#xA;Variable var_jp_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jp.name&quot;, csp);&#xA;var_jp_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_up_name,var_jp_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uParent&quot;,uParent);&#xA;isApplicableMatch.registerObject(&quot;p2p&quot;,p2p);&#xA;isApplicableMatch.registerObject(&quot;jParent&quot;,jParent);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaPackageToUMLPackage_underPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_type_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;type.name&quot;, true, csp);&#xA;var_type_name.setValue(type.getName());&#xA;var_type_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_comment_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;comment.body&quot;, csp);&#xA;var_comment_body.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_comment_body,var_type_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;interf&quot;,interf);&#xA;isApplicableMatch.registerObject(&quot;body&quot;,body);&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;type2Interface&quot;,type2Interface);&#xA;isApplicableMatch.registerObject(&quot;element&quot;,element);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/JavaAnnotation2Comment4BodyDeclaration/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InAnnotationType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeChar/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;cd2c&quot;,cd2c);&#xA;isApplicableMatch.registerObject(&quot;superInterfaceDec&quot;,superInterfaceDec);&#xA;isApplicableMatch.registerObject(&quot;cd2c2&quot;,cd2c2);&#xA;isApplicableMatch.registerObject(&quot;superInterface&quot;,superInterface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeAccess2InterfaceRealization/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;mMember&quot;,mMember);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/AnonymousClass4Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;b2e&quot;,b2e);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;type&quot;,type);&#xA;isApplicableMatch.registerObject(&quot;t2c&quot;,t2c);&#xA;isApplicableMatch.registerObject(&quot;artifact&quot;,artifact);&#xA;isApplicableMatch.registerObject(&quot;classifier&quot;,classifier);&#xA;isApplicableMatch.registerObject(&quot;c2a&quot;,c2a);&#xA;isApplicableMatch.registerObject(&quot;compilationUnit&quot;,compilationUnit);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/Manifestation4CompilationUnit2Artifact/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_bodyDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;bodyDeclaration.name&quot;, csp);&#xA;var_bodyDeclaration_name.setType(&quot;String&quot;);&#xA;Variable var_feature_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;feature.name&quot;, csp);&#xA;var_feature_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_bodyDeclaration_name,var_feature_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/MethodDec2Operation/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Class_InnerTypeInInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_jpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jpt.name&quot;, csp);&#xA;var_jpt_name.setType(&quot;String&quot;);&#xA;Variable var_umpt_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;umpt.name&quot;, csp);&#xA;var_umpt_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_jpt_name,var_umpt_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/PrimitiveTypeFloat/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;owner&quot;,owner);&#xA;isApplicableMatch.registerObject(&quot;o2c&quot;,o2c);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/InnerDeclaration2InnerClassifier_InMethod4IAnonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_mType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;mType.name&quot;, csp);&#xA;var_mType_name.setType(&quot;String&quot;);&#xA;Variable var_uClass_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;uClass.name&quot;, csp);&#xA;var_uClass_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_mType_name,var_uClass_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;externals&quot;,externals);&#xA;isApplicableMatch.registerObject(&quot;m2m&quot;,m2m);&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/UnresolvedTypeDeclaration2Type/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4_Anonymous/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;mowner&quot;,mowner);&#xA;isApplicableMatch.registerObject(&quot;uowner&quot;,uowner);&#xA;isApplicableMatch.registerObject(&quot;interface2interface&quot;,interface2interface);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/TypeParameter2Object_InInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;nd2ne&quot;,nd2ne);&#xA;isApplicableMatch.registerObject(&quot;jOwnerType&quot;,jOwnerType);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;isApplicableMatch.registerObject(&quot;jo2uo&quot;,jo2uo);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;uOwnerType&quot;,uOwnerType);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/FieldDec2Property4Class/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInAnnotationType/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_variableDec_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;variableDec.name&quot;, csp);&#xA;var_variableDec_name.setType(&quot;String&quot;);&#xA;Variable var_param_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.name&quot;, csp);&#xA;var_param_name.setType(&quot;String&quot;);&#xA;Variable var_param_direction = CSPFactoryHelper.eINSTANCE.createVariable(&quot;param.direction&quot;, csp);&#xA;var_param_direction.setType(&quot;uml.ParameterDirectionKind&quot;);&#xA;&#xA;// Create constraints&#xA;IsInParameter isInParameter = new IsInParameter();&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(isInParameter);&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;isInParameter.setRuleName(&quot;NoRuleName&quot;);&#xA;isInParameter.solve(var_param_direction);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_variableDec_name,var_param_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;operation&quot;,operation);&#xA;isApplicableMatch.registerObject(&quot;ne2ne&quot;,ne2ne);&#xA;isApplicableMatch.registerObject(&quot;uType&quot;,uType);&#xA;isApplicableMatch.registerObject(&quot;md2o&quot;,md2o);&#xA;isApplicableMatch.registerObject(&quot;jType&quot;,jType);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/VariableDec2Parameter4/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;bd2ne&quot;,bd2ne);&#xA;isApplicableMatch.registerObject(&quot;umlClass&quot;,umlClass);&#xA;isApplicableMatch.registerObject(&quot;feature&quot;,feature);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;isApplicableMatch.registerObject(&quot;classDec&quot;,classDec);&#xA;isApplicableMatch.registerObject(&quot;bodyDeclaration&quot;,bodyDeclaration);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/OperationInEnum/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInInterface/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_nonParamElement_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nonParamElement.name&quot;, true, csp);&#xA;var_nonParamElement_name.setValue(nonParamElement.getName());&#xA;var_nonParamElement_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_parameterizedType_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedType.name&quot;, csp);&#xA;var_parameterizedType_name.setType(&quot;String&quot;);&#xA;Variable var_parameterizedClassifier_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parameterizedClassifier.name&quot;, csp);&#xA;var_parameterizedClassifier_name.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;ParameterizedNameFitsNonParameterizedName parameterizedNameFitsNonParameterizedName = new ParameterizedNameFitsNonParameterizedName();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(parameterizedNameFitsNonParameterizedName);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_parameterizedType_name,var_parameterizedClassifier_name);&#xA;parameterizedNameFitsNonParameterizedName.setRuleName(&quot;NoRuleName&quot;);&#xA;parameterizedNameFitsNonParameterizedName.solve(var_parameterizedClassifier_name,var_nonParamElement_name);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;umlPackage&quot;,umlPackage);&#xA;isApplicableMatch.registerObject(&quot;ne2neNonParam&quot;,ne2neNonParam);&#xA;isApplicableMatch.registerObject(&quot;uContainer&quot;,uContainer);&#xA;isApplicableMatch.registerObject(&quot;jContainer&quot;,jContainer);&#xA;isApplicableMatch.registerObject(&quot;nonParamType&quot;,nonParamType);&#xA;isApplicableMatch.registerObject(&quot;nonParamPackage&quot;,nonParamPackage);&#xA;isApplicableMatch.registerObject(&quot;jp2up&quot;,jp2up);&#xA;isApplicableMatch.registerObject(&quot;nonParamElement&quot;,nonParamElement);&#xA;isApplicableMatch.registerObject(&quot;c2c&quot;,c2c);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/ParameterizedType2Interface_InnerTypeInClass/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_compilationUnit_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.name&quot;, csp);&#xA;var_compilationUnit_name.setType(&quot;String&quot;);&#xA;Variable var_artifact_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.name&quot;, csp);&#xA;var_artifact_name.setType(&quot;String&quot;);&#xA;Variable var_compilationUnit_originalFilePath = CSPFactoryHelper.eINSTANCE.createVariable(&quot;compilationUnit.originalFilePath&quot;, csp);&#xA;var_compilationUnit_originalFilePath.setType(&quot;String&quot;);&#xA;Variable var_artifact_fileName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;artifact.fileName&quot;, csp);&#xA;var_artifact_fileName.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_compilationUnit_name,var_artifact_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_compilationUnit_originalFilePath,var_artifact_fileName);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jm2um&quot;,jm2um);&#xA;isApplicableMatch.registerObject(&quot;um&quot;,um);&#xA;isApplicableMatch.registerObject(&quot;jm&quot;,jm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.tgg.modisco.uml/model/Uml.ecore#//Rules/CompilationUnit2Artifact/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
